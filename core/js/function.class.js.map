{"version":3,"names":[],"mappings":"","sources":["assets/projects/AdvanceManualBuilder/core/js/function.class.js"],"sourcesContent":["CLASSES.FunctionClass = class FunctionClass extends CLASSES.CommonClass {\r\n\ttreeIcon = 'symbol-method'\r\n\teditorFields = {\r\n\t\tname       : new CLASSES.EditorFieldsClass(this, {name: 'name'}),\r\n\t\tdescription: new CLASSES.EditorFieldsClass(this, {\r\n\t\t\tname      : 'description',\r\n\t\t\ttype      : 'class',\r\n\t\t\tclass     : 'DescriptionClass'\r\n\t\t}),\r\n\t\tinputs     : new CLASSES.EditorFieldsClass(this, {name: 'inputs', type: 'class[]', class: 'FunctionInputClass'}),\r\n\t\toutput     : new CLASSES.EditorFieldsClass(this, {name: 'output', type: 'class'  , class: 'FunctionOutputClass' , label: 'output'}),\r\n\t\tcode       : new CLASSES.EditorFieldsClass(this, {\r\n\t\t\tname      : 'code',\r\n\t\t\ttype      : 'class',\r\n\t\t\tclass     : 'CodePreviewClass',\r\n\t\t\tlabel     : 'CodePreview'\r\n\t\t}),\r\n\t}\r\n\tavailableChildrenClass = {\r\n\t\tFunctionInputClass : {label: 'input'      , childKey: 'inputs'},\r\n\t\tFunctionOutputClass: {label: 'function'   , childKey: 'output'},\r\n\t\tDescriptionClass   : {label: 'object'     , childKey: 'description'},\r\n\t\tCodePreviewClass   : {label: 'codePreview', childKey: 'code'},\r\n\t}\r\n\r\n\r\n\tconstructor(options = {}) {\r\n\t\tsuper(...arguments)\r\n\t\tthis.name = ''\r\n\t\tthis.inputs = []\r\n\t\tthis.addChildren(new CLASSES.FunctionOutputClass, 'output',true)\r\n\t\tthis.addChildren(new CLASSES.DescriptionClass, 'description',true)\r\n\t\tthis.addChildren(new CLASSES.CodePreviewClass, 'code',true)\r\n\t\tthis.mdTemplate.main = `*$[name]* ($[inputs])`\r\n\r\n\t\tObject.assign(this, options)\r\n\t}\r\n\r\n\r\n\teditorRender(options) {\r\n\t\toptions = Object.assign({\r\n\t\t\tparent: layout.editor.block,\r\n\t\t\tname: this.name ?? '',\r\n\t\t\tlabel: '',\r\n\t\t\tobject: false,\r\n\t\t\tprefix: 'edit ',\r\n\t\t\tbtnClass: 'btn-primary',\r\n\t\t\tcaller: 'tree'\r\n\t\t}, options)\r\n\t\tfor(const editorFieldsKey in this.editorFields) {\r\n\t\t\tthis.editorFields[editorFieldsKey].render(options.parent, this[editorFieldsKey], options.label)\r\n\t\t}\r\n\t}\r\n\r\n\r\n\trenderTree(parent) {\r\n\t\tvar item = $(treeTemplate.get('item', {\r\n\t\t\ttext: this.name,\r\n\t\t\tGlobalKey: this.GlobalKey,\r\n\t\t\tchildkey: this.parent?.GlobalKey,\r\n\t\t\ttreeIcon: this.treeIcon\r\n\t\t})).appendTo(parent)\r\n\t\tif(this.inputs.length > 0) {\r\n\t\t\tvar subItem = $(treeTemplate.get('subItem')).appendTo(item)\r\n\t\t\tfor(const k in this.inputs) {\r\n\t\t\t\tif(this.inputs[k] instanceof CLASSES.CommonClass) {\r\n\t\t\t\t\tconst element = this.inputs[k]\r\n\t\t\t\t\telement.renderTree(subItem)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tgetMd() {\r\n\t\tvar text = ''\r\n\t\tvar inputs = []\r\n\t\tfor(const inputsKey in this.inputs) {\r\n\t\t\tinputs.push(this.inputs[inputsKey].getMd())\r\n\t\t}\r\n\t\ttext += this.mdTemplate.get('main', {\r\n\t\t\tname: this.name,\r\n\t\t\tinputs: inputs.join(','),\r\n\t\t})+'\\n'\r\n\t\tif(!this.output.empty) {\r\n\t\t\ttext += locale._('output') + ':\\n'\r\n\t\t\ttext += this.output.getMd()\r\n\t\t}\r\n\t\tif(!this.description.empty) {\r\n\t\t\ttext += locale._('description') + ':\\n'\r\n\t\t\ttext += this.description.getMd()\r\n\t\t}\r\n\t\tif(!this.code.empty) {\r\n\t\t\ttext += locale._('code') + ':\\n'\r\n\t\t\ttext += this.code.getMd()\r\n\t\t}\r\n\r\n\t\treturn text\r\n\t}\r\n}\r\n\r\nCLASSES.FunctionInputClass = class FunctionInputClass extends CLASSES.CommonClass {\r\n\ttreeIcon = 'symbol-variable'\r\n\teditorFields = {\r\n\t\tname            : new CLASSES.EditorFieldsClass(this, {name: 'name'}),\r\n\t\tdefault         : new CLASSES.EditorFieldsClass(this, {name: 'default', type: 'class', class: 'VarClass'}),\r\n\t\tdataType        : new CLASSES.EditorFieldsClass(this, {\r\n\t\t\tname           : 'dataType',\r\n\t\t\ttype           : 'select',\r\n\t\t\tdataSet        : dataTypes.toArray(),\r\n\t\t\tdataSetOriginal: dataTypes\r\n\t\t}),\r\n\t\tpossible_values : new CLASSES.EditorFieldsClass(this, {\r\n\t\t\tname           : 'possible_values',\r\n\t\t\ttype           : 'class[]',\r\n\t\t\tclass          : 'VarClass'\r\n\t\t}),\r\n\t\tdescription     : new CLASSES.EditorFieldsClass(this, {\r\n\t\t\tname           : 'description',\r\n\t\t\ttype           : 'class',\r\n\t\t\tclass          : 'DescriptionClass'\r\n\t\t}),\r\n\t}\r\n\r\n\r\n\tconstructor() {\r\n\t\tsuper(...arguments)\r\n\t\tthis.name = ''\r\n\t\tthis.dataType = dataTypes.mixed\r\n\t\tthis.addChildren(new CLASSES.DescriptionClass, 'description',true)\r\n\t\tthis.addChildren(new CLASSES.VarClass, 'default',true)\r\n\t\tthis.possible_values = []\r\n\t\tthis.mdTemplate.main = `$[dataType] **$[name]** $[default] $[possible_values]`\r\n\t}\r\n\r\n\r\n\tgetMd() {\r\n\t\tvar possible_values = []\r\n\t\tfor(const possibleValuesKey in this.possible_values) {\r\n\t\t\tpossible_values.push(this.possible_values[possibleValuesKey].getMd())\r\n\t\t}\r\n\t\tvar _possible_values = ''\r\n\t\tif(possible_values.length > 0) {\r\n\t\t\t_possible_values += '['\r\n\t\t\t_possible_values += possible_values.join(',')\r\n\t\t\t_possible_values += ']'\r\n\t\t}\r\n\t\tvar dataType = '';\r\n\t\tif(this.dataType instanceof CLASSES.DataTypeClass  && !this.dataType.empty) {\r\n\t\t\tdataType = this.dataType.getMd()\r\n\t\t}\r\n\r\n\t\tvar _default = ''\r\n\t\tif(this.default instanceof CLASSES.VarClass && !this.default.empty) {\r\n\t\t\t_default = '= ' + this.default.getMd()\r\n\t\t}\r\n\t\treturn this.mdTemplate.get('main', {\r\n\t\t\tname: this.name,\r\n\t\t\tpossible_values: _possible_values,\r\n\t\t\tdataType: dataType,\r\n\t\t\tdefault: _default,\r\n\t\t})\r\n\t}\r\n}\r\n\r\nCLASSES.FunctionOutputClass = class FunctionOutputClass extends CLASSES.CommonClass {\r\n\ttreeIcon = 'symbol-constant'\r\n\teditorFields = {\r\n\t\tname: new CLASSES.EditorFieldsClass(this, {name: 'name'}),\r\n\t\tdataType: new CLASSES.EditorFieldsClass(this, {\r\n\t\t\tname: 'dataType',\r\n\t\t\ttype: 'select',\r\n\t\t\tdataSet: dataTypes.toArray(),\r\n\t\t\tdataSetOriginal: dataTypes\r\n\t\t}),\r\n\t\tpossible_values: new CLASSES.EditorFieldsClass(this, {\r\n\t\t\tname: 'possible_values',\r\n\t\t\ttype: 'class[]',\r\n\t\t\tclass: 'VarClass'\r\n\t\t}),\r\n\t}\r\n\r\n\r\n\tconstructor(option) {\r\n\t\tsuper(...arguments)\r\n\t\tthis.addChildren(new CLASSES.DataTypeClass, 'dataType',true)\r\n\t\tthis.mdTemplate.main = `$[dataType] **$[name]** $[possible_values]`\r\n\t\tthis.possible_values = []\r\n\t}\r\n\r\n\r\n\tgetMd() {\r\n\t\tvar possible_values = []\r\n\t\tfor(const possibleValuesKey in this.possible_values) {\r\n\t\t\tpossible_values.push(this.possible_values[possibleValuesKey].getMd())\r\n\t\t}\r\n\t\tvar _possible_values = ''\r\n\t\tif(possible_values.length > 0) {\r\n\t\t\t_possible_values += '['\r\n\t\t\t_possible_values += possible_values.join(',')\r\n\t\t\t_possible_values += ']'\r\n\t\t}\r\n\t\tvar dataType = '';\r\n\t\tif(this.dataType instanceof CLASSES.DataTypeClass  && !this.dataType.empty) {\r\n\t\t\tdataType = this.dataType.getMd()+': '\r\n\t\t}\r\n\t\treturn this.mdTemplate.get('main', {\r\n\t\t\tname: this.name,\r\n\t\t\tpossible_values: _possible_values,\r\n\t\t\tdataType: dataType,\r\n\t\t})\r\n\t}\r\n}\r\n\r\n\r\n\r\n"],"file":"function.class.js"}