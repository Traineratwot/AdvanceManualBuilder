{"version":3,"names":[],"mappings":"","sources":["assets/projects/AdvanceManualBuilder/core/js/common.class.js"],"sourcesContent":["CLASSES.CommonClass = class CommonClass {\r\n\t_empty = true\r\n\t_ElementId = null\r\n\t_GlobalKey = null\r\n\tname = ''\r\n\tuqField = 'name'\r\n\teditorFields = {\r\n\t\tname: new CLASSES.EditorFieldsClass(this, {name: 'name'}),\r\n\t}\r\n\ttreeIcon = 'circle-outline'\r\n\ttreeAddIcon = 'diff-added'\r\n\tavailableChildrenClass = {}\r\n\ttreeOpened = false\r\n\tparent = null\r\n\ttemp = null\r\n\tfieldKey = ''\r\n\tmdTemplate = new CLASSES.Template\r\n\r\n\r\n\tconstructor(objects = {}) {\r\n\t\tif(arguments.length == 0) {\r\n\t\t\tthis._empty = true\r\n\t\t} else {\r\n\t\t\tthis._empty = false\r\n\t\t}\r\n\t\tthis.sortKey = 0\r\n\t\tthis.classKey = this.constructor.name\r\n\t\tObject.assign(this, objects)\r\n\t\tthis[this.uqField] = this[this.uqField] ?? ''\r\n\t\tthis.mdTemplate.main = '#### $[name]'\r\n\t\tGOA.add(this)\r\n\t}\r\n\r\n\r\n\tgetMd() {\r\n\t\treturn this.mdTemplate.get('main', this)\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @param  {Object} manual\r\n\t * @param  {number} key\r\n\t */\r\n\tsetParent(parent, key) {\r\n\t\tif(parent instanceof CLASSES.CommonClass) {\r\n\t\t\tthis.parent = parent\r\n\t\t\tthis.sortKey = key\r\n\t\t\tthis.ElementId = key\r\n\t\t}\r\n\t}\r\n\r\n\r\n\taddChildren(obj, key, empty = false) {\r\n\t\tif(obj instanceof CLASSES.CommonClass && obj.parent === null) {\r\n\t\t\tif(key.indexOf('[]') > 0 || this[key] instanceof Array) {\r\n\t\t\t\tif(!this[key] instanceof Array) {\r\n\t\t\t\t\tthis[key] = []\r\n\t\t\t\t}\r\n\t\t\t\tvar id = this[key].length\r\n\t\t\t\tobj.setParent(this, id)\r\n\t\t\t\tthis[key][id] = obj\r\n\t\t\t\tthis._empty = empty\r\n\t\t\t} else {\r\n\t\t\t\tobj.setParent(this, -1)\r\n\t\t\t\tthis[key] = obj\r\n\t\t\t\tthis._empty = empty\r\n\t\t\t}\r\n\t\t\t$(document).trigger(this.classKey + '_childAdd', {\r\n\t\t\t\tobj: this,\r\n\t\t\t\tchild: obj,\r\n\t\t\t\tclassKey: obj.constructor.name\r\n\t\t\t})\r\n\t\t\t$(document).trigger('childAdd', {\r\n\t\t\t\tobj: this,\r\n\t\t\t\tchild: obj,\r\n\t\t\t\tclassKey: obj.constructor.name\r\n\t\t\t})\r\n\t\t\t// Console.info(this.GlobalKey + ' <== ' + obj.GlobalKey)\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tset(key, value) {\r\n\t\tswitch( typeof value ) {\r\n\t\t\tcase 'boolean':\r\n\t\t\tcase 'number':\r\n\t\t\tcase 'symbol':\r\n\t\t\tcase 'string':\r\n\t\t\t\tvalue = ('' + value).trim()\r\n\t\t\t\tif(value == '') {\r\n\t\t\t\t\tvalue = false\r\n\t\t\t\t}\r\n\t\t\t\tbreak\r\n\t\t\tdefault:\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t\tthis[key] = value\r\n\t\tthis._empty = false\r\n\t\t$(document).trigger(this.classKey + 'set', {\r\n\t\t\tobj: this,\r\n\t\t\tkey: key,\r\n\t\t\tvalue: value,\r\n\t\t\tclassKey: this.classKey,\r\n\t\t})\r\n\t\t$(document).trigger('set', {\r\n\t\t\tobj: this,\r\n\t\t\tkey: key,\r\n\t\t\tvalue: value,\r\n\t\t\tclassKey: this.classKey,\r\n\t\t})\r\n\t}\r\n\r\n\r\n\trender() { Console.info('TODO render(){}') }\r\n\r\n\r\n\teditorRender(options) {\r\n\t\tthis[this.uqField] = this[this.uqField] ?? ''\r\n\t\toptions = Object.assign({\r\n\t\t\tparent: layout.editor.block,\r\n\t\t\tfieldKey: this.fieldKey ?? '',\r\n\t\t\tlabel: this[this.uqField],\r\n\t\t\tobject: false,\r\n\t\t\tprefix: 'edit',\r\n\t\t\tbtnClass: 'btn-primary',\r\n\t\t\tcaller: 'tree'\r\n\t\t}, options)\r\n\t\t// Console.info('TODO editorRender(){}', arguments)\r\n\t\tlet label = options.label ? '\"' + options.label + '\"' : ''\r\n\t\tif(!label || label.trim() == '') {\r\n\t\t\tlabel = options.fieldKey\r\n\t\t}\r\n\t\tvar buttonLabel = locale._(options.prefix) + ' ' + locale._(label)\r\n\t\tif(current.editor == this.GlobalKey){\r\n\t\t\treturn this.editorRenderFields(options.parent,options.caller)\r\n\t\t}\r\n\t\tif(typeof layout?.editor?.modals[this.GlobalKey] == 'undefined') {\r\n\t\t\tlayout.editor.modals[this.GlobalKey] = $(editorTemplate.get('modal', {\r\n\t\t\t\tid: this.GlobalKey,\r\n\t\t\t\tparent: this?.parent?.GlobalKey,\r\n\t\t\t\tname: buttonLabel,\r\n\t\t\t\tclassKey: this.constructor.name,\r\n\t\t\t})).appendTo('body')\r\n\t\t}\r\n\t\tlayout.editor.modals[this.GlobalKey].find('div.modal-body').html('')\r\n\t\tif(options.caller == 'tree') {\r\n\t\t\tthis.editorRenderFields(options.parent)\r\n\t\t} else {\r\n\t\t\tthis.editorRenderFields(layout.editor.modals[this.GlobalKey].find('div.modal-body'))\r\n\t\t\tvar attr = ''\r\n\t\t\tvar button = $(editorTemplate.get('button', {\r\n\t\t\t\tid: this.GlobalKey,\r\n\t\t\t\ttext: buttonLabel,\r\n\t\t\t\tclassKey: this.constructor.name,\r\n\t\t\t\tbtnClass: options.btnClass,\r\n\t\t\t\tattr: attr,\r\n\t\t\t})).appendTo(options.parent)\r\n\t\t\tEMC.add({\r\n\t\t\t\telement: button.find('button')[0],\r\n\t\t\t\tevent: 'click',\r\n\t\t\t\tfunc: 'editorRender_button'\r\n\t\t\t})\r\n\t\t\tEMC.add({\r\n\t\t\t\telement: layout.editor.modals[this.GlobalKey].find('button.action-save')[0],\r\n\t\t\t\tevent: 'click',\r\n\t\t\t\tfunc: 'editorRender_button_action_save',\r\n\t\t\t\toptions: options,\r\n\t\t\t\telem: this,\r\n\t\t\t})\r\n\t\t\tEMC.add({\r\n\t\t\t\telement: layout.editor.modals[this.GlobalKey].find('button.action-cancel')[0],\r\n\t\t\t\tevent: 'click',\r\n\t\t\t\tfunc: 'editorRender_button_action_cancel',\r\n\t\t\t\toptions: this,\r\n\t\t\t})\r\n\t\t}\r\n\t\t$(document).trigger(this.GlobalKey + '_rendered', {\r\n\t\t\tobj: this,\r\n\t\t\tkey: this.GlobalKey,\r\n\t\t\toptions: options,\r\n\t\t})\r\n\t\t$(document).trigger('editor_rendered', {\r\n\t\t\tobj: this,\r\n\t\t\tkey: this.GlobalKey,\r\n\t\t\toptions: options,\r\n\t\t})\r\n\t\tEMC.setEvents()\r\n\t}\r\n\r\n\r\n\teditorRenderFields(parent, caller) {\r\n\t\tcaller = caller ? caller : this.constructor.name\r\n\t\tparent.html('')\r\n\t\tfor(const editorFieldsKey in this.editorFields) {\r\n\t\t\tthis.editorFields[editorFieldsKey].render(parent, this[editorFieldsKey], false, caller)\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tremoveChildren(GlobalKey, obj = false) {\r\n\t\tif(obj == false) {\r\n\t\t\tobj = this\r\n\t\t}\r\n\t\tfor(const objKey in obj) {\r\n\t\t\tconst val = obj[objKey]\r\n\t\t\tif(val instanceof CommonClass) {\r\n\t\t\t\tif(val.GlobalKey == GlobalKey) {\r\n\t\t\t\t\tdelete obj[objKey]\r\n\t\t\t\t\treturn true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(val instanceof Array || val instanceof Object) {\r\n\t\t\t\tfor(const objKey in obj) {\r\n\t\t\t\t\tconst val = obj[objKey]\r\n\t\t\t\t\tif(val instanceof CommonClass) {\r\n\t\t\t\t\t\tif(val.GlobalKey == GlobalKey) {\r\n\t\t\t\t\t\t\tdelete obj[objKey]\r\n\t\t\t\t\t\t\treturn true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprepare() {\r\n\t\treturn true\r\n\t}\r\n\r\n\r\n\tsuccess(msg = '', data = {}) {\r\n\t\treturn {success: true, msg: msg, data: data}\r\n\t}\r\n\r\n\r\n\tfailure(msg = '', data = {}) {\r\n\t\treturn {success: false, msg: msg, data: data}\r\n\t}\r\n\r\n\r\n\tget empty() {\r\n\t\treturn this._empty\r\n\t}\r\n\r\n\r\n\tset empty(value) {\r\n\t\treturn false\r\n\t}\r\n\r\n\r\n\tget ElementId() {\r\n\t\treturn this._ElementId\r\n\t}\r\n\r\n\r\n\tset ElementId(value) {\r\n\t\tif(this._ElementId == null) {\r\n\t\t\tthis._ElementId = value\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tget GlobalKey() {\r\n\t\treturn this._GlobalKey\r\n\t}\r\n\r\n\r\n\tset GlobalKey(value) {\r\n\t\tif(this._GlobalKey == null) {\r\n\t\t\tthis._GlobalKey = value\r\n\t\t}\r\n\t}\r\n\r\n\r\n\ttoObject() {\r\n\t\tvar JSON = {}\r\n\t\tfor(let key in this) {\r\n\t\t\tif(key != 'parent') {\r\n\t\t\t\tlet element = this[key]\r\n\t\t\t\tif(element instanceof CLASSES.CommonClass) {\r\n\t\t\t\t\tJSON[key] = element.toObject()\r\n\t\t\t\t\tcontinue\r\n\t\t\t\t}\r\n\t\t\t\tif(element instanceof Array) {\r\n\t\t\t\t\tJSON[key] = []\r\n\t\t\t\t\tfor(let k in element) {\r\n\t\t\t\t\t\tlet e = element[k]\r\n\t\t\t\t\t\tif(e instanceof CLASSES.CommonClass) {\r\n\t\t\t\t\t\t\tJSON[key].push(e.toObject())\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcontinue\r\n\t\t\t\t}\r\n\t\t\t\tJSON[key] = element\r\n\t\t\t}\r\n\t\t}\r\n\t\tdelete JSON.parent\r\n\t\tdelete JSON.editorFields\r\n\t\treturn JSON\r\n\t}\r\n\r\n\r\n\tfromObject(value) {\r\n\t\tObject.assign(this, value)\r\n\t\tthis._empty = false\r\n\t\treturn this.toObject()\r\n\t}\r\n\r\n\r\n\trenderTree(parent) {\r\n\t\tGOA.add(this)\r\n\t\tvar name\r\n\t\tif(this.name) {\r\n\t\t\tname = this.name\r\n\t\t} else if(this?.defaultName) {\r\n\t\t\tname = this.defaultName\r\n\t\t} else {\r\n\t\t\tname = this.constructor.name\r\n\t\t}\r\n\t\tvar content = $(treeTemplate.get('content', {\r\n\t\t\ttext: name,\r\n\t\t\tGlobalKey: this.GlobalKey,\r\n\t\t\tchildkey: this?.parent?.GlobalKey,\r\n\t\t\ttreeIcon: this.treeIcon\r\n\t\t})).appendTo(parent)\r\n\r\n\t}\r\n\r\n\r\n\trenderAddItem(subItem) {\r\n\t\tlayout.editor.addModals[this.GlobalKey] = $(layout.editor.template.get('addModal', {\r\n\t\t\tGlobalKey: this.GlobalKey,\r\n\t\t\tchildkey: this.GlobalKey,\r\n\t\t})).appendTo('body')\r\n\t\tfor(const availableChildrenClassKey in this.availableChildrenClass) {\r\n\t\t\tvar select = layout.editor.addModals[this.GlobalKey].find('select')\r\n\t\t\tselect.append($(editorTemplate.get('option', {\r\n\t\t\t\tlabel: locale._(this.availableChildrenClass[availableChildrenClassKey].label),\r\n\t\t\t\tkey: this.availableChildrenClass[availableChildrenClassKey].childKey,\r\n\t\t\t\tvalue: availableChildrenClassKey,\r\n\t\t\t})))\r\n\t\t}\r\n\t\t$(treeTemplate.get('add', {\r\n\t\t\ttext: 'add new',\r\n\t\t\tGlobalKey: this.GlobalKey,\r\n\t\t\ttreeIcon: this.treeAddIcon\r\n\t\t})).appendTo(subItem)\r\n\t}\r\n\r\n\r\n\tcreateNewElement(classKey, parentGlobalKey, childKey, parent = null) {\r\n\t\tparent = parent ?? layout.editor.block\r\n\t\tvar tempKey = tmp.add(new CLASSES[classKey])\r\n\t\ttmp[tempKey].editorRenderFields(parent, 'create')\r\n\t\tvar elem = $(editorTemplate.get('button', {\r\n\t\t\tid: tempKey,\r\n\t\t\tbtnClass: 'btn-success',\r\n\t\t\ttext: 'save',\r\n\t\t})).appendTo(parent).find('button')\r\n\t\tEMC.add({\r\n\t\t\telement: elem[0],\r\n\t\t\tevent: 'click',\r\n\t\t\tfunc: 'createNewElement',\r\n\t\t\tobject: this,\r\n\t\t\ttempKey: tempKey,\r\n\t\t\tchildKey: childKey,\r\n\t\t})\r\n\t\tEMC.setEvents()\r\n\t\treturn tmp[tempKey]\r\n\t}\r\n\r\n\r\n\tregeneration(obj) {\r\n\t\tfor(const thisKey in this) {\r\n\t\t\tif(this[thisKey] instanceof Object && (this[thisKey] instanceof CommonClass) == false) {\r\n\t\t\t\tif(this[thisKey]?.classKey) {\r\n\t\t\t\t\tvar tmpKey = tmp.add(new CLASSES[this[thisKey].classKey](this[thisKey]))\r\n\t\t\t\t\tthis.addChildren(tmp[tmpKey].regeneration(this[thisKey]), thisKey)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(this[thisKey] instanceof Array) {\r\n\t\t\t\tfor(const k in this[thisKey]) {\r\n\t\t\t\t\tif(this[thisKey][k] instanceof Object && (this[thisKey][k] instanceof CommonClass) == false) {\r\n\t\t\t\t\t\tif(this[thisKey][k]?.classKey) {\r\n\t\t\t\t\t\t\tvar tmpKey = tmp.add(new CLASSES[this[thisKey][k].classKey](this[thisKey][k]))\r\n\t\t\t\t\t\t\tthis.addChildren(tmp[tmpKey].regeneration(this[thisKey][k]), thisKey)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tObject.assign(this, obj)\r\n\t\treturn this\r\n\t}\r\n\r\n\r\n\taddElement(tmpElement) {\r\n\r\n\t}\r\n\r\n\r\n\ttreeOpenedToggle() {\r\n\t\tif(this.treeOpened) {\r\n\t\t\tthis.treeOpened = false\r\n\t\t} else {\r\n\t\t\tthis.treeOpened = true\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tparentClass(className, maxIteration = 10) {\r\n\t\tvar i = maxIteration\r\n\r\n\t\tvar proto = this.__proto__\r\n\t\twhile(proto.constructor.name != className && i > 0) {\r\n\t\t\ti--\r\n\t\t\tproto = proto.__proto__\r\n\t\t}\r\n\t\treturn proto\r\n\t}\r\n\r\n\r\n\tgetManual(limit = 100) {\r\n\t\tif(this instanceof CLASSES.ManualClass) {\r\n\t\t\treturn this\r\n\t\t}\r\n\t\tvar i = 0\r\n\t\tvar obj = this\r\n\t\twhile(!(obj?.parent instanceof CLASSES.ManualClass) && i < limit) {\r\n\t\t\ti++\r\n\t\t\tobj = obj?.parent\r\n\t\t}\r\n\t\treturn obj?.parent ? obj.parent : false\r\n\t}\r\n}\r\n\r\nCLASSES.EditorFieldsClass = class EditorFieldsClass {\r\n\tconstructor(object, options) {\r\n\t\tthis.object = object\r\n\t\tthis.name = ''\r\n\t\tthis.caller = this.constructor.name\r\n\t\tthis.type = 'text'\r\n\t\tthis.dataSet = []\r\n\t\tthis.dataSetOriginal = {}\r\n\t\tthis.callback = false\r\n\t\tthis.label = false\r\n\t\tthis.placeholder = ''\r\n\t\tthis.id = getRandomString()\r\n\t\tthis.input = false\r\n\t\tObject.assign(this, options)\r\n\t}\r\n\r\n\r\n\trender(parent, value = '', label = false, caller = false) {\r\n\t\tif(!label) {\r\n\t\t\tif(this.label) {\r\n\t\t\t\tlabel = this.label\r\n\t\t\t} else {\r\n\t\t\t\tlabel = this.name\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(caller) {\r\n\t\t\tthis.caller = caller\r\n\t\t}\r\n\t\tif(this.input === false) {\r\n\t\t\tswitch( this.type ) {\r\n\t\t\t\tcase 'class':\r\n\t\t\t\t\tthis.renderClass(parent, value, label)\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 'class[]':\r\n\t\t\t\t\tthis.renderClassArray(parent, value, label)\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 'select':\r\n\t\t\t\t\tthis.renderSelect(parent, value, label)\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 'textarea':\r\n\t\t\t\t\tthis.renderTextarea(parent, value, label)\r\n\t\t\t\t\tbreak\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis.renderDefault(parent, value, label)\r\n\t\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.input.appendTo(parent)\r\n\t\t\tthis.input.val(value)\r\n\t\t}\r\n\t\t$(document).trigger(this.classKey + '_rendered', {\r\n\t\t\tobj: this,\r\n\t\t\tparent: parent,\r\n\t\t\tlabel: label,\r\n\t\t\tvalue: value,\r\n\t\t})\r\n\t\t$(document).trigger('CommonClass_rendered', {\r\n\t\t\tobj: this,\r\n\t\t\tparent: parent,\r\n\t\t\tlabel: label,\r\n\t\t\tvalue: value,\r\n\t\t})\r\n\t\treturn this.object\r\n\t}\r\n\r\n\r\n\trenderClass(parent, value = '', label = false) {\r\n\t\tif(this.object[this.name] instanceof CLASSES[this.class]) {\r\n\t\t\tthis.object[this.name].editorRender({\r\n\t\t\t\tparent: parent,\r\n\t\t\t\tfieldKey: this.name ?? '',\r\n\t\t\t\tobject: this.object,\r\n\t\t\t\tprefix: 'edit',\r\n\t\t\t\tbtnClass: 'btn-primary',\r\n\t\t\t\tcaller: this.caller\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tvar key = tmp.add(new CLASSES[this.class])\r\n\t\t\ttmp[key].editorRender({\r\n\t\t\t\tparent: parent,\r\n\t\t\t\tfieldKey: this.name ?? '',\r\n\t\t\t\tobject: this.object,\r\n\t\t\t\tprefix: 'set',\r\n\t\t\t\tbtnClass: 'btn-info',\r\n\t\t\t\tcaller: this.caller\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\r\n\trenderClassArray(parent, value = '', label = false) {\r\n\t\tvar result = new CLASSES[this.class]\r\n\t\tvar key = tmp.add(result)\r\n\t\tfor(const fieldKey in this.object[this.name]) {\r\n\t\t\tthis.object[this.name][fieldKey].editorRender({\r\n\t\t\t\tparent: parent,\r\n\t\t\t\tfieldKey: this.name ?? '',\r\n\t\t\t\tobject: this.object,\r\n\t\t\t\tprefix: 'edit',\r\n\t\t\t\tbtnClass: 'btn-secondary',\r\n\t\t\t\tcaller: this.caller\r\n\t\t\t})\r\n\t\t}\r\n\t\ttmp[key].editorRender({\r\n\t\t\tparent: parent,\r\n\t\t\tfieldKey: this.name ?? '',\r\n\t\t\tlabel: '',\r\n\t\t\tobject: this.object,\r\n\t\t\tprefix: 'add',\r\n\t\t\tbtnClass: 'btn-info',\r\n\t\t\tcaller: this.caller\r\n\t\t})\r\n\t}\r\n\r\n\r\n\trenderSelect(parent, value = '', label = false) {\r\n\t\tif(this.dataSet instanceof Array || this.dataSet instanceof Object) {\r\n\t\t\tthis.input = $(editorTemplate.get('select', {\r\n\t\t\t\tlabel: label,\r\n\t\t\t\tname: this.name,\r\n\t\t\t\tid: this.id,\r\n\t\t\t})).appendTo(parent)\r\n\t\t\tfor(const dataSetKey in this.dataSet) {\r\n\t\t\t\tif(dataSetKey == value) {\r\n\t\t\t\t\t$(editorTemplate.get('option', {\r\n\t\t\t\t\t\tlabel: this.dataSet[dataSetKey],\r\n\t\t\t\t\t\tvalue: dataSetKey,\r\n\t\t\t\t\t\tattr: 'selected',\r\n\t\t\t\t\t})).appendTo(this.input.find('select'))\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$(editorTemplate.get('option', {\r\n\t\t\t\t\t\tlabel: this.dataSet[dataSetKey],\r\n\t\t\t\t\t\tvalue: dataSetKey,\r\n\t\t\t\t\t})).appendTo(this.input.find('select'))\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tEMC.add({\r\n\t\t\t\telement: this.input.find('select')[0],\r\n\t\t\t\tevent: 'focus',\r\n\t\t\t\tfunc: 'inputChanging'\r\n\t\t\t})\r\n\t\t\tEMC.add({\r\n\t\t\t\telement: this.input.find('select')[0],\r\n\t\t\t\tevent: 'change blur',\r\n\t\t\t\tfunc: 'selectChanged',\r\n\t\t\t\tcallback: this.callback,\r\n\t\t\t\tobject: this.object,\r\n\t\t\t\tname: this.name,\r\n\t\t\t\tdataSetOriginal: this.dataSetOriginal,\r\n\t\t\t\tdataSet: this.dataSet,\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\r\n\trenderDefault(parent, value = '', label = false) {\r\n\t\tthis.input = $(editorTemplate.get('input', {\r\n\t\t\tlabel: label,\r\n\t\t\tname: this.name,\r\n\t\t\ttype: this.type,\r\n\t\t\tvalue: value,\r\n\t\t\tid: this.id,\r\n\t\t\tplaceholder: this.placeholder,\r\n\t\t})).appendTo(parent)\r\n\t\tif((this.dataSet instanceof Array || this.dataSet instanceof Object) && Count(this.dataSet) > 0) {\r\n\t\t\tthis.input.find('input').autocomplete({\r\n\t\t\t\tsource: this.dataSet,\r\n\t\t\t\tminLength: 0,\r\n\t\t\t})\r\n\t\t}\r\n\t\tEMC.add({\r\n\t\t\telement: this.input.find('input')[0],\r\n\t\t\tevent: 'input',\r\n\t\t\tfunc: 'inputChanging'\r\n\t\t})\r\n\t\tEMC.add({\r\n\t\t\telement: this.input.find('input')[0],\r\n\t\t\tevent: 'change blur',\r\n\t\t\tfunc: 'inputChanged',\r\n\t\t\tcallback: this.callback,\r\n\t\t\tobject: this.object,\r\n\t\t\tname: this.name,\r\n\t\t})\r\n\t\tEMC.setEvents()\r\n\t}\r\n\r\n\r\n\trenderTextarea(parent, value = '', label = false) {\r\n\t\tthis.input = $(editorTemplate.get('textarea', {\r\n\t\t\tlabel: label,\r\n\t\t\tname: this.name,\r\n\t\t\ttype: this.type,\r\n\t\t\tvalue: value,\r\n\t\t\tid: this.id,\r\n\t\t\tplaceholder: this.placeholder,\r\n\t\t})).appendTo(parent)\r\n\t\tif(this.dataSet instanceof Array || this.dataSet instanceof Object) {\r\n\t\t\tthis.input.find('input').autocomplete({\r\n\t\t\t\tsource: this.dataSet,\r\n\t\t\t\tminLength: 0,\r\n\t\t\t})\r\n\t\t}\r\n\t\tEMC.add({\r\n\t\t\telement: this.input.find('textarea')[0],\r\n\t\t\tevent: 'input',\r\n\t\t\tfunc: 'inputChanging'\r\n\t\t})\r\n\r\n\t\tEMC.add({\r\n\t\t\telement: this.input.find('textarea')[0],\r\n\t\t\tevent: 'change blur',\r\n\t\t\tfunc: 'inputChanged',\r\n\t\t\tcallback: this.callback,\r\n\t\t\tobject: this.object,\r\n\t\t\tname: this.name,\r\n\t\t})\r\n\t\tEMC.setEvents()\r\n\t}\r\n\r\n}\r\n\r\n\r\n"],"file":"common.class.js"}