{"version":3,"names":[],"mappings":"","sources":["assets/projects/AdvanceManualBuilder/core/js/elements.class.js"],"sourcesContent":["CLASSES.DataTypeClass = class DataTypeClass extends CLASSES.CommonClass {\r\n\tconstructor(options = {}) {\r\n\t\tsuper(...arguments)\r\n\t\tthis.name = ''\r\n\t\tthis.subName = ''\r\n\t\tthis.preview = ''\r\n\t\tthis.color = '#693'\r\n\t\tthis.mdTemplate.main = `<i style=\"color: #693\" title=\"$[name]\">$[name] : $[subName]</i>`\r\n\t\tObject.assign(this, options)\r\n\t\tthis.name = this.name.toLowerCase()\r\n\t\tthis.subName = this.subName.toLowerCase()\r\n\t\tthis.preview = this.preview.toLowerCase()\r\n\t}\r\n\r\n\r\n\tgetMd() {\r\n\t\tif(this.name == this.subName) {\r\n\t\t\tthis.mdTemplate.main = `<i style=\"color: ${this.color}\">$[name]</i>`\r\n\t\t} else {\r\n\t\t\tthis.mdTemplate.main = `<i style=\"color: ${this.color}\">$[name] : $[subName]</i>`\r\n\t\t}\r\n\t\treturn super.getMd()\r\n\t}\r\n\r\n}\r\n\r\nCLASSES.DescriptionClass = class DescriptionClass extends CLASSES.CommonClass {\r\n\tconstructor() {\r\n\t\tsuper(...arguments)\r\n\t\tthis.body = ''\r\n\t}\r\n\r\n\r\n\teditorFields = {\r\n\t\tbody: new CLASSES.EditorFieldsClass(this, {\r\n\t\t\tname: 'body',\r\n\t\t\ttype: 'textarea',\r\n\t\t\tlabel: 'Description',\r\n\t\t\tplaceholder: 'Markdown'\r\n\t\t}),\r\n\t}\r\n\r\n\r\n\teditorRender(options) {\r\n\t\toptions = Object.assign({\r\n\t\t\tparent: layout.editor.block,\r\n\t\t\tfieldKey: this.fieldKey ?? '',\r\n\t\t\tprefix: 'edit',\r\n\t\t\tbtnClass: 'btn-primary',\r\n\t\t\tcaller: 'tree'\r\n\t\t}, options)\r\n\t\tfor(const editorFieldsKey in this.editorFields) {\r\n\t\t\tthis.editorFields[editorFieldsKey].render(options.parent, this[editorFieldsKey], options.label)\r\n\t\t}\r\n\t}\r\n\r\n\r\n\trender() {\r\n\r\n\t}\r\n\r\n\r\n\tgetMd() {\r\n\t\treturn '\\n' + this.body + '\\n'\r\n\t}\r\n}\r\n\r\nCLASSES.VarClass = class VarClass extends CLASSES.CommonClass {\r\n\ttreeIcon = 'symbol-variable'\r\n\teditorFields = {\r\n\t\tvalue: new CLASSES.EditorFieldsClass(this, {name: 'value'}),\r\n\t\tdataType: new CLASSES.EditorFieldsClass(this, {\r\n\t\t\tname: 'dataType',\r\n\t\t\ttype: 'select',\r\n\t\t\tdataSet: dataTypes.toArray(),\r\n\t\t\tdataSetOriginal: dataTypes\r\n\t\t}),\r\n\t}\r\n\tuqField = 'value'\r\n\r\n\tconstructor(options = {}) {\r\n\t\tsuper(...arguments)\r\n\t\tthis.name = null\r\n\t\tthis.dataType = dataTypes.mixed\r\n\t\tthis.value = null\r\n\t\tthis.mdTemplate.main = `$[dataType] $[value]`\r\n\t\tObject.assign(this, options)\r\n\t}\r\n\r\n\r\n\tset(key, value) {\r\n\t\tsuper.set(key, value)\r\n\t\tif(!this.value){\r\n\t\t\tthis._empty = true\r\n\t\t}else{\r\n\t\t\tthis._empty = false\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tgetMd() {\r\n\t\tvar dataType = ''\r\n\t\tif(this.dataType instanceof CLASSES.DataTypeClass) {\r\n\t\t\tdataType = this.dataType.getMd()\r\n\t\t}\r\n\t\treturn this.mdTemplate.get('main', {\r\n\t\t\t'dataType': dataType,\r\n\t\t\t'value': this.value\r\n\t\t})\r\n\t}\r\n}\r\n\r\nCLASSES.CodePreviewClass = class CodePreviewClass extends CLASSES.CommonClass {\r\n\r\n\teditorFields = {\r\n\t\tlanguage: new CLASSES.EditorFieldsClass(this, {\r\n\t\t\tname: 'language',\r\n\t\t\ttype: 'text',\r\n\t\t\tdataSet: CodeLanguagesDataSet\r\n\t\t}),\r\n\t\tbody: new CLASSES.EditorFieldsClass(this, {name: 'body', type: 'textarea', label: 'codePreview'}),\r\n\t}\r\n\ttreeIcon = 'code'\r\n\tname = locale._('codePreview')\r\n\r\n\r\n\tconstructor(options = {}) {\r\n\t\tsuper(...arguments)\r\n\t\tthis.language = ''\r\n\t\tthis.body = ''\r\n\t\tthis.mdTemplate.main = `\\`\\`\\`$[language]\\n$[body]\\n\\`\\`\\``\r\n\t\tObject.assign(this, options)\r\n\t\tthis.lanuage = this.language.toLowerCase()\r\n\t}\r\n\r\n}\r\n\r\n\r\n"],"file":"elements.class.js"}