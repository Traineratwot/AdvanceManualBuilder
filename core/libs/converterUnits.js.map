{"version":3,"names":[],"mappings":"","sources":["assets/projects/AdvanceManualBuilder/core/libs/converterUnits.js"],"sourcesContent":["function in_array($k, $a) {\r\n\tfor(const $aKey in $a) {\r\n\t\tif($k == $a[$aKey]) {return true}\r\n\t}\r\n\treturn false\r\n}\r\n\r\nfunction array_keys($a) {\r\n\tvar arr = []\r\n\tfor(const $aKey in $a) {\r\n\t\tarr.push($aKey)\r\n\t}\r\n\treturn arr\r\n}\r\n\r\nfunction Exception(message, code) {\r\n\tthis.message = message;\r\n\tthis.code = code;\r\n\tthis.getCode=()=>{\r\n\t\treturn this.code\r\n\t}\r\n\tthis.getMessage=()=>{\r\n\t\treturn this.message\r\n\t}\r\n}\r\n\r\nclass ConverterUnits {\r\n\tconverterRule = {\r\n\t\t'byte': {\r\n\t\t\t0: {\r\n\t\t\t\t'bit': {\r\n\t\t\t\t\t0: 0.125,\r\n\t\t\t\t\t1: 'b'\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t1: {\r\n\t\t\t\t'kb': {\r\n\t\t\t\t\t0: 1024,\r\n\t\t\t\t\t1: 'b'\r\n\t\t\t\t},\r\n\t\t\t\t'mb': {\r\n\t\t\t\t\t0: 1024,\r\n\t\t\t\t\t1: 'kb'\r\n\t\t\t\t},\r\n\t\t\t\t'gb': {\r\n\t\t\t\t\t0: 1024,\r\n\t\t\t\t\t1: 'mb'\r\n\t\t\t\t},\r\n\t\t\t\t'tb': {\r\n\t\t\t\t\t0: 1024,\r\n\t\t\t\t\t1: 'gb'\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'SI': {\r\n\t\t\t\t0: 1,\r\n\t\t\t\t1: 'b'\r\n\t\t\t}\r\n\t\t},\r\n\t\t'mass': {\r\n\t\t\t0: {\r\n\t\t\t\t'g': {\r\n\t\t\t\t\t0: 0.001,\r\n\t\t\t\t\t1: 'kg'\r\n\t\t\t\t},\r\n\t\t\t\t'mg': {\r\n\t\t\t\t\t0: 0.001,\r\n\t\t\t\t\t1: 'g'\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t1: {\r\n\t\t\t\t'T': {\r\n\t\t\t\t\t0: 1000,\r\n\t\t\t\t\t1: 'kg'\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'SI': {\r\n\t\t\t\t0: 1,\r\n\t\t\t\t1: 'kg'\r\n\t\t\t}\r\n\t\t},\r\n\t\t'length': {\r\n\t\t\t0: {\r\n\t\t\t\t'mm': {\r\n\t\t\t\t\t0: 0.001,\r\n\t\t\t\t\t1: 'm'\r\n\t\t\t\t},\r\n\t\t\t\t'cm': {\r\n\t\t\t\t\t0: 10,\r\n\t\t\t\t\t1: 'mm'\r\n\t\t\t\t},\r\n\t\t\t\t'dm': {\r\n\t\t\t\t\t0: 10,\r\n\t\t\t\t\t1: 'dm'\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t1: {\r\n\t\t\t\t'km': {\r\n\t\t\t\t\t0: 1000,\r\n\t\t\t\t\t1: 'm'\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'SI': {\r\n\t\t\t\t0: 1,\r\n\t\t\t\t1: 'm'\r\n\t\t\t}\r\n\t\t},\r\n\t\t'time': {\r\n\t\t\t0: {\r\n\t\t\t\t'ms': {\r\n\t\t\t\t\t0: 0.001,\r\n\t\t\t\t\t1: 's'\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t1: {\r\n\t\t\t\t'min': {\r\n\t\t\t\t\t0: 60,\r\n\t\t\t\t\t1: 's'\r\n\t\t\t\t},\r\n\t\t\t\t'h': {\r\n\t\t\t\t\t0: 60,\r\n\t\t\t\t\t1: 'min'\r\n\t\t\t\t},\r\n\t\t\t\t'day': {\r\n\t\t\t\t\t0: 24,\r\n\t\t\t\t\t1: 'h'\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'SI': {\r\n\t\t\t\t0: 1,\r\n\t\t\t\t1: 's'\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tconvert(n, type, from, to) {\r\n\t\tif(typeof n == 'undefined') n = 0\r\n\t\tif(typeof type == 'undefined') type = 'byte'\r\n\t\tif(typeof from == 'undefined') from = 'SI'\r\n\t\tif(typeof to == 'undefined') to = 'best'\r\n\t\ttry {\r\n\t\t\t//validate input start\r\n\t\t\tvar out = false\r\n\t\t\tvar size = {}\r\n\t\t\tvar i = 1\r\n\t\t\tn = parseFloat(n)\r\n\t\t\tif(!n) {\r\n\t\t\t\tthrow new Exception('invalid number', 0)\r\n\t\t\t}\r\n\t\t\tif(typeof this.converterRule[type] != 'undefined') {\r\n\t\t\t\tvar converterRule = this.converterRule[type]\r\n\t\t\t\tvar SI = converterRule['SI'][1]\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Exception('invalid type', 0)\r\n\t\t\t}\r\n\t\t\tif(to != 'best' && to != 'SI') {\r\n\t\t\t\tif(!in_array(to, array_keys(converterRule[0])) && !in_array(to, array_keys(converterRule[1])) && to != SI) {\r\n\t\t\t\t\tto = 'best'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//validate input end\r\n\t\t\tif(to == from && to != 'SI') {\r\n\t\t\t\tthrow new Exception('easy )', 1)\r\n\t\t\t}\r\n\t\t\tn = this.ToSi(n, type, from)\r\n\t\t\tif(!n) {\r\n\t\t\t\tthrow new Exception('invalid \"from\" unit', 2)\r\n\t\t\t}\r\n\t\t\tif(to == 'SI' || to == SI) {\r\n\t\t\t\tthrow new Exception('easy )', 2)\r\n\t\t\t}\r\n\t\t\tif(to != 'best') {\r\n\t\t\t\tif(in_array(to, array_keys(converterRule[0]))) {\r\n\t\t\t\t\tvar g\r\n\t\t\t\t\tg = 0\r\n\t\t\t\t} else if(in_array(to, array_keys(converterRule[1]))) {\r\n\t\t\t\t\tg = 1\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Exception('invalid \"to\" unit', 2)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvar g\r\n\t\t\t\tif(n >= converterRule['SI'][0]) {\r\n\t\t\t\t\tg = 1\r\n\t\t\t\t} else {\r\n\t\t\t\t\tg = 0\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar key\r\n\t\t\t__loop1:\r\n\t\t\t\tfor(key in converterRule[g]) {\r\n\t\t\t\t\tvar rule\r\n\t\t\t\t\trule = converterRule[g][key]\r\n\t\t\t\t\tif(n >= rule[0]) {\r\n\t\t\t\t\t\tn /= rule[0]\r\n\t\t\t\t\t\tsize = {\r\n\t\t\t\t\t\t\t0: n.toFixed(i),\r\n\t\t\t\t\t\t\t1: key\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif(to == 'best') {\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(to != 'best' && to == key) {\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\t}\r\n\t\t\t\t\ti++\r\n\t\t\t\t}\r\n\t\t\tif(!out && size instanceof Object) {\r\n\t\t\t\tout = size\r\n\t\t\t} else {\r\n\t\t\t\tout = {\r\n\t\t\t\t\t0: n,\r\n\t\t\t\t\t1: SI\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch(__e__) {\r\n\t\t\tvar e\r\n\t\t\tif(__e__ instanceof Exception) {\r\n\t\t\t\te = __e__\r\n\t\t\t\tconsole.log(e.getMessage())\r\n\t\t\t\t__loop1:\r\n\t\t\t\t\tswitch(e.getCode()) {\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t0: n.toFixed(i),\r\n\t\t\t\t\t\t\t\t1: from\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t0: n.toFixed(i),\r\n\t\t\t\t\t\t\t\t1: SI\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn e.getMessage()\r\n\t\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthrow __e__\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn out\r\n\t}\r\n\r\n\r\n\tToSi(n, type, from) {\r\n\t\tif(typeof type == 'undefined') type = 'byte'\r\n\t\tif(typeof from == 'undefined') from = 'SI'\r\n\t\tif(typeof this.converterRule[type] != 'undefined') {\r\n\t\t\tvar converterRule\r\n\t\t\tconverterRule = this.converterRule[type]\r\n\t\t\tvar SI\r\n\t\t\tSI = converterRule['SI'][1]\r\n\t\t} else {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tif(from == 'SI' || from == SI) {\r\n\t\t\treturn n\r\n\t\t}\r\n\t\tvar g\r\n\r\n\t\tif(in_array(from, array_keys(converterRule[0]))) {\r\n\t\t\tg = 0\r\n\t\t} else if(in_array(from, array_keys(converterRule[1]))) {\r\n\t\t\tg = 1\r\n\t\t} else {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t__loop1:\r\n\t\t\twhile(from != SI && typeof converterRule[g][from] != 'undefined') {\r\n\t\t\t\tvar f_\r\n\t\t\t\tf_ = converterRule[g][from]\r\n\t\t\t\tn *= f_[0]\r\n\t\t\t\tfrom = f_[1]\r\n\t\t\t}\r\n\t\treturn n\r\n\t}\r\n}\r\n\r\nconverterUnits = new ConverterUnits\r\n\r\n"],"file":"converterUnits.js"}