{"version":3,"names":[],"mappings":"","sources":["assets/projects/AdvanceManualBuilder/core/libs/lib.js"],"sourcesContent":["/**\r\n * @param {...number} args An array containing number like items.\r\n * @return {number} average of an args\r\n */\r\nMath.avg = function() {\r\n\tvar sum = 0\r\n\tfor(var i = 0; i < arguments.length; i++) {\r\n\t\tsum += (typeof arguments[i] == 'number') ? arguments[i] : Number(arguments[i])\r\n\t}\r\n\treturn sum / arguments.length\r\n}\r\n/**\r\n * String is converted to number\r\n * @param {...number} args An array containing number like items.\r\n * @return {number} sum of an args\r\n */\r\nMath.sum = function() {\r\n\tvar sum = 0\r\n\tfor(var i = 0; i < arguments.length; i++) {\r\n\t\tsum += (typeof arguments[i] == 'number') ? arguments[i] : Number(arguments[i])\r\n\t}\r\n\treturn sum\r\n}\r\nMath.add = Math.sum\r\n/**\r\n * Tau is equal to two PI\r\n */\r\nMath.Tau = Math.PI * 2\r\n\r\n/**\r\n\r\n\t-----------Number-----------\r\n\r\n */\r\n\r\n/**\r\n * @param {...number} args An array containing number like items.\r\n * @return {number} average of an args\r\n */\r\nNumber.prototype.avg = function() {\r\n\tvar sum = Number(this)\r\n\tfor(var i = 0; i < arguments.length; i++) {\r\n\t\tsum += (typeof arguments[i] == 'number') ? arguments[i] : Number(arguments[i])\r\n\t}\r\n\treturn sum / (arguments.length + 1)\r\n}\r\n/**\r\n * String is converted to number\r\n * @param {...number} args An array containing number like items.\r\n * @return {number} sum of an args\r\n */\r\nNumber.prototype.sum = function() {\r\n\tvar sum = Number(this)\r\n\tfor(var i = 0; i < arguments.length; i++) {\r\n\t\tsum += (typeof arguments[i] == 'number') ? arguments[i] : Number(arguments[i])\r\n\t}\r\n\treturn sum\r\n}\r\nNumber.prototype.add = Number.prototype.sum\r\n/**\r\n * @param  {String} charset=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz\"\r\n */\r\nNumber.prototype.getRandomString = function(charset = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz') {\r\n\tlet length = Number(this)\r\n\tif(length < 0) length = -length\r\n\tvar str = ''\r\n\tfor(var i = 0; i < length; i++) {\r\n\t\tstr += charset[Math.floor(Math.random() * charset.length)]\r\n\t}\r\n\treturn str\r\n}\r\n/**\r\n\r\n\t-----------String-----------\r\n\r\n */\r\n/**\r\n * @param  {Number} length=16\r\n */\r\nString.prototype.getRandomString = function(length = 16) {\r\n\tlet charset = this\r\n\tif(length < 0) length = -length\r\n\tvar str = ''\r\n\tfor(var i = 0; i < length; i++) {\r\n\t\tstr += charset[Math.floor(Math.random() * charset.length)]\r\n\t}\r\n\treturn str\r\n}\r\n\r\n/**\r\n * -------------------------\r\n */\r\n/**\r\n\r\n\t-----------array-----------\r\n\r\n */\r\ngetUniqueValues = function() {\r\n\treturn unique = this.filter((value, index, self) => {\r\n\t\treturn self.indexOf(value) === index\r\n\t})\r\n}\r\n\r\nfunction Count(obj) {\r\n\tvar i = 0\r\n\tfor(const key in obj) {\r\n\t\tif(obj.hasOwnProperty(key)) {\r\n\t\t\ti++\r\n\t\t}\r\n\t}\r\n\treturn i\r\n}\r\n\r\nfunction uniqueArrayObject(array, keys, obj) {\r\n\r\n\tvar test = []\r\n\r\n\tvar count = Count(obj)\r\n\tif(Count(array) == 0 || Count(keys) == 0) {\r\n\t\treturn true\r\n\t}\r\n\tif(count > Count(keys)) {\r\n\t\treturn true\r\n\t}\r\n\tvar error = 0\r\n\tfor(const key in array) {\r\n\t\tif(array.hasOwnProperty(key)) {\r\n\t\t\tconst elem = array[key]\r\n\t\t\tif(Count(elem) != count) {\r\n\t\t\t\terror++\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tfor(const keysKey in keys) {\r\n\t\t\t\tconst objKey = keys[keysKey]\r\n\t\t\t\tif(typeof elem[objKey] != 'undefined' && typeof obj[objKey] != 'undefined') {\r\n\t\t\t\t\tif(obj[objKey] instanceof HTMLElement) {\r\n\t\t\t\t\t\tif(!elem[objKey].isSameNode(obj[objKey])) {\r\n\t\t\t\t\t\t\terror++\r\n\t\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif(!Object.is(elem[objKey], obj[objKey])) {\r\n\t\t\t\t\t\t\terror++\r\n\t\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\terror++\r\n\t\t\t\t\tcontinue\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif(error == Count(array)) {\r\n\t\treturn true\r\n\t} else {\r\n\t\treturn false\r\n\t}\r\n}\r\n\r\n/**\r\n * @param  {Number} length=16\r\n * @param  {String} charset=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz\"\r\n */\r\nfunction getRandomString(length = 16, charset = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz') {\r\n\tif(length < 0) length = -length\r\n\tvar str = ''\r\n\tfor(var i = 0; i < length; i++) {\r\n\t\tstr += charset[Math.floor(Math.random() * charset.length)]\r\n\t}\r\n\treturn str\r\n}\r\n\r\nvar eq = (a, b, eq = false) => {\r\n\tfunction Exception(response) {\r\n\t\tthis.response = response\r\n\t\tthis.get = () => {\r\n\t\t\treturn this.response\r\n\t\t}\r\n\t}\r\n\r\n\tfunction objCompare(a, b, eq) {\r\n\t\tif(a.constructor.name != b.constructor.name) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tif(a instanceof HTMLElement) {\r\n\t\t\tif(b instanceof HTMLElement) {\r\n\t\t\t\tif(eq) {\r\n\t\t\t\t\treturn a.isSameNode(b)\r\n\t\t\t\t}\r\n\t\t\t\treturn a.isEqualNode(b)\r\n\t\t\t} else {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\ttry {\r\n\t\tif(eq) {\r\n\t\t\tif(Object.is(a, b)) {\r\n\t\t\t\tthrow new Exception(true)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif(a == b) {\r\n\t\t\t\tthrow new Exception(true)\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar type = typeof a\r\n\t\tif(type === typeof b) {\r\n\t\t\tswitch( type ) {\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\tcase 'number':\r\n\t\t\t\tcase 'string':\r\n\t\t\t\t\tif(eq) {\r\n\t\t\t\t\t\tthrow new Exception(a === b)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthrow new Exception(a == b)\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\tif(Object.is(a, b)) {\r\n\t\t\t\t\t\tthrow new Exception(true)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new Exception(objCompare(a, b, eq))\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new Exception(false)\r\n\t\t}\r\n\t} catch(__e__) {\r\n\t\treturn __e__.get()\r\n\t}\r\n}\r\n\r\n"],"file":"lib.js"}