{"version":3,"names":[],"mappings":"","sources":["assets/projects/AdvanceManualBuilder/core/libs/eventManager.class.js"],"sourcesContent":["class EventManagerClass {\r\n\teventList = []\r\n\teventEntityList = {}\r\n\tdefiedEvent = {}\r\n\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.init()\r\n\t}\r\n\r\n\r\n\tadd(options) {\r\n\t\tthis.eventList.push(options.event)\r\n\t\tif(uniqueArrayObject(this.eventEntityList, ['element', 'event', 'func'], options)) {\r\n\t\t\tvar id = getRandomString()\r\n\t\t\t// console.log('i add ' + id)\r\n\t\t\toptions = Object.assign(\r\n\t\t\t\t{\r\n\t\t\t\t\tid: id,\r\n\t\t\t\t\telement: document,\r\n\t\t\t\t\tevent: 'click',\r\n\t\t\t\t\tfunc: 'todo'\r\n\t\t\t\t}\r\n\t\t\t\t, options)\r\n\t\t\tthis.eventEntityList[id] = options\r\n\t\t\treturn id\r\n\t\t} else {\r\n\t\t\t// console.log('i not add ', options)\r\n\t\t}\r\n\t\treturn false\r\n\t}\r\n\r\n\r\n\tinit() {\r\n\t\tvar self = this\r\n\t\t$(`*[data-event]`).each(function() {\r\n\t\t\tself.add({\r\n\t\t\t\telement: this,\r\n\t\t\t\tevent: $(this).data('event'),\r\n\t\t\t\tfunc: $(this).data('event-func'),\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\r\n\tsetEvents() {\r\n\t\tthis.eventList = getUniqueValues.call(this.eventList)\r\n\t\tfor(const eventListKey in this.eventList) {\r\n\t\t\t$(document).off(this.eventList[eventListKey], EMC.manager)\r\n\t\t\t$(document).on(this.eventList[eventListKey], EMC.manager)\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tcloseEvents() {\r\n\r\n\t}\r\n\r\n\r\n\ttodo() {\r\n\t\tconsole.debug('TODO EventManagerClass')\r\n\t}\r\n\r\n\r\n\tmanager(event) {\r\n\t\t// console.clear()\r\n\t\tfor(const eventEntityListKey in EMC.eventEntityList) {\r\n\t\t\tconst elem = EMC.eventEntityList[eventEntityListKey]\r\n\r\n\t\t\t// console.info(`elem.event.indexOf(event.type) `, elem.event.indexOf(event.type))\r\n\t\t\t// console.info(`(Object.is(elem.element, this) || Object.is(elem.element, event.target) `, (Object.is(elem.element, this) || Object.is(elem.element, event.target)))\r\n\t\t\t// console.warn(elem, event)\r\n\t\t\tif(elem.event.indexOf(event.type) >= 0 && (Object.is(elem.element, this) || Object.is(elem.element, event.target))) {\r\n\t\t\t\tif(typeof EMC[elem.func] == 'function') {\r\n\t\t\t\t\tEMC.defiedEvent[elem.id]\r\n\t\t\t\t\tConsole.success(elem)\r\n\t\t\t\t\treturn EMC[elem.func].call(event.target, event, elem)\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Console.error(`undefined function: \"${EMC[elem.func]}\"`)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\nvar EMC = new EventManagerClass()\r\nEMC.editorRender_button = function() {\r\n\tlayout.editor.modals[$(this).data('object')].modal('show')\r\n}\r\nEMC.editorRender_button_action_save = function(event, data) {\r\n\tvar options = data.options\r\n\tif(options.object !== false) {\r\n\t\toptions.object.addChildren(data.elem, options.fieldKey)\r\n\t\tif(options.caller != 'create') {\r\n\t\t\tlayout.editor.render(GOA[options.object.GlobalKey])\r\n\t\t\tlayout.tree.render()\r\n\t\t}\r\n\t}\r\n}\r\nEMC.editorRender_button_action_cancel = function(event, data) {\r\n\ttmp.remove(data)\r\n}\r\nEMC.inputChanging = function(event, data) {\r\n\t$(this).addClass('changing')\r\n\t$(this).removeClass('changed')\r\n}\r\nEMC.inputChanged = function(event, data) {\r\n\tdata.object.set(data.name, $(this).val())\r\n\t$(this).removeClass('changing')\r\n\t$(this).addClass('changed')\r\n}\r\nEMC.selectChanged = function(event, data) {\r\n\tdata.object.set(data.name, data.dataSetOriginal ? data.dataSetOriginal[$(this).val()] : data.dataSet[$(this).val()])\r\n\t$(this).removeClass('changing')\r\n\t$(this).addClass('changed')\r\n}\r\nEMC.createNewElement = function(event, data) {\r\n\tif(this instanceof CLASSES.ManualClass) {\r\n\t\tdata.object.addElement(tmp[data.tempKey])\r\n\t} else {\r\n\t\tdata.object.addChildren(tmp[data.tempKey], data.childKey)\r\n\t}\r\n\tlayout.tree.render()\r\n}\r\nEMC.treeDblclick = function(event, data) {\r\n\tcurrent.editor = $(this).data('object')\r\n\tlayout.editor.render(GOA[current.editor])\r\n}\r\nEMC.treeNondblclick = function(event, data) {\r\n\t$(this).toggleClass('caret-down').find('+ .nested').slideToggle()\r\n\tGOA[$(this).data('object')].treeOpenedToggle()\r\n}\r\nEMC.treeAddDblclick = function(event, data) {\r\n\tif($(this).data('classkey') == 'ManualClass') {\r\n\t\tlayout.editor.block.html('')\r\n\t\tvar key = tmp.add(new CLASSES.ManualClass)\r\n\t\ttmp[key].editorRender({\r\n\t\t\tparent: layout.editor.block\r\n\t\t})\r\n\t\t$(editorTemplate.get('button', {\r\n\t\t\tid: key,\r\n\t\t\tclassKey: 'ManualClass',\r\n\t\t\tbtnClass: 'btn-success',\r\n\t\t\ttext: 'save',\r\n\t\t})).appendTo(layout.editor.block).on('click', () => {\r\n\t\t\tmanuals.add(tmp[key])\r\n\t\t\tlayout.tree.render()\r\n\t\t})\r\n\t\treturn false\r\n\t}\r\n\tvar GlobalKey = $(this).data('object')\r\n\tvar childKey = $(this).data('childKey')\r\n\tvar modal = layout.editor.addModals[GlobalKey]\r\n\tmodal.modal('show')\r\n\tmodal.find('select').on('change', function() {\r\n\t\t\tmodal.find('button.createElem i').html($(this).val())\r\n\t\t})\r\n\tmodal.find('button.createElem').on('click', () => {\r\n\t\t\tvar classKey = modal.find('select').val()\r\n\t\t\tvar childKey = modal.find(`option[value=\"${classKey}\"]`).data('key')\r\n\t\t\tGOA[GlobalKey].createNewElement(classKey, GlobalKey, childKey, layout.editor.block)\r\n\t\t})\r\n}\r\n\r\n"],"file":"eventManager.class.js"}