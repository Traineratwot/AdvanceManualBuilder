{"version":3,"names":[],"mappings":"","sources":["assets/projects/AdvanceManualBuilder/old/engine/workstation/js/classes/workstation.class.js"],"sourcesContent":["class _objects {\r\n\tconstructor() {\r\n\t\tthis.conteiner = {}\r\n\t\tthis.conteiner.body = $(\"#edit_panel\");\r\n\t\tthis.arguments = arguments;\r\n\t\tthis.Types = Types\r\n\t\tthis.Shematik = Shematik;\r\n\t\tthis.structuer = []\r\n\t\tthis.data = {};\r\n\t\tthis.iii = 0;\r\n\t\tthis.DataImport = false;\r\n\t\tthis.menuArray = {}\r\n\t\tlet args = arguments;\r\n\t\tif (args.length > 0) {\r\n\t\t\tthis.Parent = parseInt(this.arguments[0][1][0]) || 0;\r\n\t\t\tthis.id = parseInt(this.arguments[0][1][1]) || 0;\r\n\t\t\tthis.DataImport = this.arguments[0][2] || false;\r\n\t\t\tthis.__constructor(...this.arguments);\r\n\t\t} else {\r\n\t\t\tthis.__constructor();\r\n\t\t}\r\n\t\tthis.step1()\r\n\t\tif (this.DataImport) {\r\n\t\t\t$.each(this.menuArray, function (indexInArray, valueOfElement) {\r\n\t\t\t\t$(valueOfElement).trigger(\"click\");\r\n\t\t\t});\r\n\t\t}\r\n\t\tvar keys = Object.keys(this.menuArray)\r\n\t\tthis.menuArray[keys[0]].trigger(\"click\");\r\n\t}\r\n\t__constructor() { }\r\n\r\n\tnextLine(to = this.toolbox) {\r\n\t\tthis.currentP = $(`<p>`).appendTo(to);\r\n\t\tthis.structuer.push(this.currentP);\r\n\t\treturn this.currentP;\r\n\t}\r\n\tstep1() {\r\n\t\tself = this;\r\n\t\tthis.conteiner.body.html(\"\")\r\n\t\tthis.conteiner.Chunk = this.Shematik.Chunks[Project.PorjectData.Projectype][this.constructor.name.trim('_')]\r\n\t\tthis.conteiner.menu = $(`<menu style=\"display: inline-block;\">`).appendTo(this.conteiner.body);\r\n\t\t$.each(this.conteiner.Chunk, (indexInArray, valueOfElement) => {\r\n\t\t\tself.menuArray[indexInArray] = $(`<div class='menu_item' data-Field=\"${indexInArray}\">${indexInArray}</div>`).appendTo(self.conteiner.menu)\r\n\t\t\t\t.on(\"click\", (e) => {\r\n\t\t\t\t\tvar currentField = $(e.target).attr(\"data-Field\")\r\n\t\t\t\t\tself.currentField = this.conteiner.Chunk[currentField]\r\n\t\t\t\t\t$(\".menu_item\").removeClass(\"selected\");\r\n\t\t\t\t\t$(e.target).addClass(\"selected\")\r\n\t\t\t\t\tself.structuer = [];\r\n\t\t\t\t\tself.iii = 0;\r\n\t\t\t\t\tvar addAction = self.overstep(currentField, false, self.DataImport)\r\n\t\t\t\t\tif (self.DataImport) {\r\n\t\t\t\t\t\tif (typeof self.DataImport[currentField] !== 'undefined' && self.DataImport[currentField].constructor.name == 'Array' && self.DataImport[currentField].length > 1) {\r\n\t\t\t\t\t\t\tfor (let i = 1; i < self.DataImport[currentField].length; i++) {\r\n\t\t\t\t\t\t\t\tif (addAction) {\r\n\t\t\t\t\t\t\t\t\taddAction.remove()\r\n\t\t\t\t\t\t\t\t\tself.iii++;\r\n\t\t\t\t\t\t\t\t\t$(`#right${currentField}`).html(`(${self.iii + 1})`)\r\n\t\t\t\t\t\t\t\t\tself.overstep(currentField, true, self.DataImport)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t});\r\n\t\t$(`<button onclick=\"save()\" style=\"width: min-content !important;margin: 10px 0px 0 0;\">save<i class=\"far-save\"></i></button>`).appendTo(this.conteiner.menu);\r\n\t\tthis.conteiner.toolbox = $(`<div class=\"toolbox\">`).appendTo(this.conteiner.body)\r\n\t}\r\n\r\n\toverstep(var_name, add = false, DataImport = false) {\r\n\t\tvar self = this;\r\n\t\tif (!add) {\r\n\t\t\tif (this.data[var_name] && !DataImport) {\r\n\t\t\t\treturn this.regenrate(var_name)\r\n\t\t\t}\r\n\t\t\tif (this.conteiner.toolbox) {\r\n\t\t\t\tthis.conteiner.toolbox.remove()\r\n\t\t\t}\r\n\t\t\tthis.conteiner.toolbox = $(`<div class=\"toolbox\">`).appendTo(this.conteiner.body);\r\n\r\n\t\t}\r\n\t\tvar block = $(`<div class=\"tool-block\" style=\"display:none;\">`).appendTo(this.conteiner.toolbox).fadeIn()\r\n\t\tvar area = this.currentField\r\n\t\tvar addAction;\r\n\t\tfor (const k in area.fields) {\r\n\t\t\tif (area.fields.hasOwnProperty(k)) {\r\n\t\t\t\tconst e = area.fields[k];\r\n\t\t\t\tvar _field;\r\n\t\t\t\te.attr = e.attr || [];\r\n\t\t\t\tswitch (k.replace(/\\d/g, '')) {\r\n\t\t\t\t\tcase \"select\":\r\n\t\t\t\t\t\t_field = this.create_select(e);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"text\":\r\n\t\t\t\t\t\t_field = `<input onkeyup=\"Preview()\" title=\"${e.placeholder || ''}\" ${e.attr.join(' ')} type=\"text\" placeholder=\"${e.placeholder || ''}\">`;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"textarea\":\r\n\t\t\t\t\t\t_field = `<textarea onkeyup=\"Preview()\" title=\"${e.placeholder || ''}\" ${e.attr.join(' ')} rows=\"3\" placeholder=\"${e.placeholder || ''}\"></textarea>`;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"button\":\r\n\t\t\t\t\t\t_field = `<button title=\"${e.title || ''}\" ${e.attr.join(' ')} >${e.title}</button>`;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\t\t_field = `<input onkeyup=\"Preview()\" title=\"${e.lable || ''}\" ${e.attr.join(' ')} data-lable=\"${e.lable}\" title=\"${e.lable || ''}\" style=\"width:40px !important\" type=\"checkbox\">`;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t_field = `<input onkeyup=\"Preview()\" title=\"${e.placeholder || ''}\" ${e.attr.join(' ')} type=\"${k}\" placeholder=\"${e.placeholder || ''}\">`;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t_field = $(_field).appendTo(this.nextLine(block));\r\n\t\t\t\tif (e.action == 'add') {\r\n\t\t\t\t\taddAction = _field\r\n\t\t\t\t}\r\n\t\t\t\tif (e.varName) {\r\n\t\t\t\t\tif (area.type == \"array\") {\r\n\t\t\t\t\t\tif (!this.data[var_name]) {\r\n\t\t\t\t\t\t\tthis.data[var_name] = []\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!this.data[var_name][this.iii]) {\r\n\t\t\t\t\t\t\tthis.data[var_name][this.iii] = {}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.data[var_name][this.iii][e.varName] = _field\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (!this.data[var_name]) {\r\n\t\t\t\t\t\t\tthis.data[var_name] = {}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (e.short && e.short == true) {\r\n\t\t\t\t\t\t\tthis.data[var_name] = _field\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.data[var_name][e.varName] = _field\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tvar NewValue\r\n\t\t\t\tif (DataImport) {\r\n\t\t\t\t\tif (typeof DataImport[var_name] !== 'undefined' && typeof DataImport[var_name][e.varName] !== 'undefined') {\r\n\t\t\t\t\t\tNewValue = DataImport[var_name][e.varName]\r\n\t\t\t\t\t} else if (typeof DataImport[var_name] !== 'undefined' && typeof DataImport[var_name][this.iii] !== 'undefined' && typeof DataImport[var_name][this.iii][e.varName] !== 'undefined') {\r\n\t\t\t\t\t\tNewValue = DataImport[var_name][this.iii][e.varName]\r\n\t\t\t\t\t} else if (typeof DataImport[var_name] !== 'undefined') {\r\n\t\t\t\t\t\tNewValue = DataImport[var_name]\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tNewValue = null\r\n\t\t\t\t\t}\r\n\t\t\t\t\tswitch (k.replace(/\\d/g, '')) {\r\n\t\t\t\t\t\tcase \"select\":\r\n\t\t\t\t\t\t\t$(_field).find(\"option\").each(function (index, element) {\r\n\t\t\t\t\t\t\t\tvar vsfu = $(element).val()\r\n\t\t\t\t\t\t\t\tif (NewValue.indexOf(vsfu) >= 0) {\r\n\t\t\t\t\t\t\t\t\t$(element).prop('selected', true);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"textarea\":\r\n\t\t\t\t\t\t\t_field.html(NewValue)\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\t\t\tif (NewValue == \"true\") {\r\n\t\t\t\t\t\t\t\t_field.prop('checked', true);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t_field.prop('checked', false);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t_field.val(NewValue)\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (addAction) {\r\n\t\t\taddAction.on('click', (e) => {\r\n\t\t\t\t$(e.target).remove()\r\n\t\t\t\tself.iii++;\r\n\t\t\t\t$(`#right${var_name}`).html(`(${self.iii + 1})`)\r\n\t\t\t\tself.overstep(var_name, true)\r\n\t\t\t})\r\n\t\t\treturn addAction;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tregenrate(var_name) {\r\n\t\tvar self = this;\r\n\t\tvar Dt = this.data[var_name];\r\n\t\t// var area = this.currentField;\r\n\t\tvar addAction;\r\n\t\tif (this.conteiner.toolbox) {\r\n\t\t\tthis.conteiner.toolbox.remove()\r\n\t\t}\r\n\t\tvar _field;\r\n\t\tthis.conteiner.toolbox = $(`<div class=\"toolbox\">`).appendTo(this.conteiner.body);\r\n\t\tswitch (Dt.constructor.name) {\r\n\t\t\tcase \"k\":\r\n\t\t\t\tDt.appendTo(this.nextLine(this.conteiner.toolbox))\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Array\":\r\n\t\t\t\tvar _r = true;\r\n\t\t\t\tfor (const iterator of Dt) {\r\n\t\t\t\t\tif (!iterator) {\r\n\t\t\t\t\t\tself.overstep(var_name)\r\n\t\t\t\t\t\t_r = false\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (iterator.constructor.name == \"k\") {\r\n\t\t\t\t\t\titerator.appendTo(this.nextLine(this.conteiner.toolbox))\r\n\t\t\t\t\t} else if (iterator.constructor.name == \"Object\") {\r\n\t\t\t\t\t\tfor (const k in iterator) {\r\n\t\t\t\t\t\t\tif (iterator.hasOwnProperty(k)) {\r\n\t\t\t\t\t\t\t\tconst elem = iterator[k];\r\n\t\t\t\t\t\t\t\tif (elem.constructor.name == \"k\") {\r\n\t\t\t\t\t\t\t\t\telem.appendTo(this.nextLine(this.conteiner.toolbox))\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (_r) {\r\n\t\t\t\t\t_field = $(`<button>add</button>`).appendTo(this.nextLine(this.conteiner.toolbox));\r\n\t\t\t\t\taddAction = _field\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Object\":\r\n\t\t\t\tfor (const k in Dt) {\r\n\t\t\t\t\tif (Dt.hasOwnProperty(k)) {\r\n\t\t\t\t\t\tconst e = Dt[k];\r\n\t\t\t\t\t\tif (e.constructor.name == \"k\") {\r\n\t\t\t\t\t\t\te.appendTo(this.nextLine(this.conteiner.toolbox))\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"String\":\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tif (addAction) {\r\n\t\t\taddAction.on('click', (e) => {\r\n\t\t\t\t$(e.target).remove()\r\n\t\t\t\tself.iii = Dt.length;\r\n\t\t\t\t$(`#right${var_name}`).html(`(${self.iii + 1})`)\r\n\t\t\t\tself.overstep(var_name, true)\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tcreate_select(e) {\r\n\t\tif (e.attr) {\r\n\t\t\tvar _field = `<select onchange=\"Preview()\" title=\"${e.title || ''}\" ${e.attr.join(' ')}>`;\r\n\t\t} else {\r\n\t\t\tvar _field = `<select onchange=\"Preview()\">`;\r\n\t\t}\r\n\t\tif (!e.options) {\r\n\t\t\tvar values = e\r\n\t\t} else {\r\n\t\t\tvar values = e.options\r\n\t\t}\r\n\t\tif (typeof values == 'object') {\r\n\t\t\tfor (const val of values) {\r\n\t\t\t\t_field += `<option value=\"${val}\">${val}</option>`\r\n\t\t\t}\r\n\t\t} else if (typeof values == 'string') {\r\n\t\t\tvar v = values.split('.')\r\n\t\t\tvar obj = this[v[0]][v[1]]\r\n\t\t\tfor (const val of obj) {\r\n\t\t\t\t_field += `<option value=\"${val}\">${val}</option>`\r\n\t\t\t}\r\n\t\t}\r\n\t\t_field += `</select>`;\r\n\t\t_field = $(_field)\r\n\t\treturn _field\r\n\t}\r\n\texport() {\r\n\t\tvar exportData = {};\r\n\t\texportData.ClassType = this.constructor.name;\r\n\t\tfor (const key in this.data) {\r\n\t\t\tif (this.data.hasOwnProperty(key)) {\r\n\t\t\t\tconst e = this.data[key];\r\n\t\t\t\tvar cn = e.constructor.name;\r\n\t\t\t\tswitch (cn) {\r\n\t\t\t\t\tcase \"k\":\r\n\t\t\t\t\t\tif (!exportData[key]) {\r\n\t\t\t\t\t\t\texportData[key] = []\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (e.val() != \"on\" && e.val() != \"off\") {\r\n\t\t\t\t\t\t\texportData[key] = e.val()\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\texportData[key] = e.prop(\"checked\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"Array\":\r\n\t\t\t\t\t\tvar i = 0;\r\n\t\t\t\t\t\tfor (const iterator of e) {\r\n\t\t\t\t\t\t\tfor (const k in iterator) {\r\n\t\t\t\t\t\t\t\tif (iterator.hasOwnProperty(k)) {\r\n\t\t\t\t\t\t\t\t\tconst elem = iterator[k];\r\n\t\t\t\t\t\t\t\t\tif (!exportData[key]) {\r\n\t\t\t\t\t\t\t\t\t\texportData[key] = []\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif (!exportData[key][i]) {\r\n\t\t\t\t\t\t\t\t\t\texportData[key][i] = {}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif (elem.val() != \"on\" && elem.val() != \"off\") {\r\n\t\t\t\t\t\t\t\t\t\texportData[key][i][k] = elem.val()\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\texportData[key][i][k] = elem.prop(\"checked\")\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"Object\":\r\n\t\t\t\t\t\tvar i = 0;\r\n\t\t\t\t\t\tfor (const k in e) {\r\n\t\t\t\t\t\t\tif (e.hasOwnProperty(k)) {\r\n\t\t\t\t\t\t\t\tconst elem = e[k];\r\n\t\t\t\t\t\t\t\tif (!exportData[key]) {\r\n\t\t\t\t\t\t\t\t\texportData[key] = {}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// if (!exportData[key][i]) {\r\n\t\t\t\t\t\t\t\t// \texportData[key][i] = {}\r\n\t\t\t\t\t\t\t\t// }\r\n\t\t\t\t\t\t\t\tif (elem.val() != \"on\" && elem.val() != \"off\") {\r\n\t\t\t\t\t\t\t\t\texportData[key][k] = elem.val()\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\texportData[key][k] = elem.prop(\"checked\")\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"String\":\r\n\t\t\t\t\t\texportData[key] = e\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn exportData\r\n\t}\r\n\timport() {\r\n\r\n\t}\r\n}\r\n\r\nclass _function extends _objects {\r\n\t__constructor() {\r\n\r\n\t\t// this.param = [];\r\n\t\t// this.addParam()\r\n\t}\r\n\taddParam() {\r\n\t\t// var Itr \t= $(`<tr>`).appendTo(this.SELECTOR);\r\n\t\t// var Itd \t= $(`<td>`).appendTo(Itr);\r\n\t\t// var Iselect\t= $(`<select name=\"type\">${this.types}</select>`).appendTo(Itd)\r\n\t\t// \tItd \t= $(`<td>`).appendTo(Itr);\r\n\t\t// var Iparam\t= $(`<input type=\"text\" name=\"param\" placeholder=\"Param name\">`).appendTo(Itd)\r\n\t\t// \tItd \t= $(`<td>`).appendTo(Itr);\r\n\t\t// var Iadd\t= $(`<button><i class=\"fas fa-plus\"></i></button>`).appendTo(Itd)\r\n\t\t// \tItr \t= $(`<tr>`).appendTo(this.SELECTOR);\r\n\t\t// \tItd \t= $(`<td colspan=\"3\">`).appendTo(Itr);\r\n\t\t// var Idisc\t= $(`<input type=\"text\" name=\"discription\" placeholder=\"Discription\">`).appendTo(Itd)\r\n\t\t// this.param.push({\r\n\t\t// \tIparam,\r\n\t\t// \tIselect,\r\n\t\t// \tIdisc,\r\n\t\t// })\r\n\t}\r\n\taddReturn() { }\r\n}\r\nclass _class extends _objects {\r\n\t__constructor() { }\r\n}\r\nclass _const extends _objects {\r\n\t__constructor() { }\r\n}\r\nclass _var extends _objects {\r\n\t__constructor() { }\r\n}\r\n\r\nclass _method extends _objects {\r\n\t__constructor() { }\r\n}\r\n\r\nvar Maxies = {\r\n\tfunction: class extends _function { },\r\n\tclass: class extends _class { },\r\n\tconst: class extends _const { },\r\n\tvar: class extends _var { },\r\n\tmethod: class extends _method { },\r\n};\r\n\r\nfunction CreateClass(Type) {\r\n\treturn new Maxies[Type](arguments)\r\n}\r\n//# sourceMappingURL=workstation.class.js.map\r\n"],"file":"workstation.class.js"}