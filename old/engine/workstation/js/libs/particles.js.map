{"version":3,"names":[],"mappings":"","sources":["assets/projects/AdvanceManualBuilder/old/engine/workstation/js/libs/particles.js"],"sourcesContent":["/* eslint-disable */\r\n(function(global, factory) {\r\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('animejs')) :\r\n        typeof define === 'function' && define.amd ? define(['animejs'], factory) :\r\n            (global.Particles = factory(global.anime));\r\n}(this, (function(anime) {\r\n    'use strict';\r\n    /* eslint-enable */\r\n\r\n    function Particles(element, options) {\r\n        this.el = getElement(element);\r\n        this.options = extend({color: getCSSValue(this.el, 'background-color')}, this.defaults, options);\r\n        this.init();\r\n    }\r\n\r\n    Particles.prototype = {\r\n        defaults: {\r\n            type: 'circle',\r\n            style: 'fill',\r\n            canvasPadding: 150,\r\n            duration: 1000,\r\n            easing: 'easeInOutCubic',\r\n            direction: 'left',\r\n            size: function() { return Math.floor((Math.random() * 3) + 1); },\r\n            speed: function() { return rand(4); },\r\n            particlesAmountCoefficient: 3,\r\n            oscillationCoefficient: 20\r\n        },\r\n        init: function () {\r\n            this.particles = [];\r\n            this.frame = null;\r\n            this.canvas = document.createElement('canvas');\r\n            this.ctx = this.canvas.getContext('2d');\r\n            this.canvas.className = 'particles-canvas';\r\n            this.canvas.style = 'display:none;';\r\n            this.wrapper = document.createElement('div');\r\n            this.wrapper.className = 'particles-wrapper';\r\n            this.el.parentNode.insertBefore(this.wrapper, this.el);\r\n            this.wrapper.appendChild(this.el);\r\n            this.parentWrapper = document.createElement('div');\r\n            this.parentWrapper.className = 'particles';\r\n            this.wrapper.parentNode.insertBefore(this.parentWrapper, this.wrapper);\r\n            this.parentWrapper.appendChild(this.wrapper);\r\n            this.parentWrapper.appendChild(this.canvas);\r\n        },\r\n        loop: function () {\r\n            this.updateParticles();\r\n            this.renderParticles();\r\n            if (this.isAnimating()) {\r\n                this.frame = requestAnimationFrame(this.loop.bind(this));\r\n            }\r\n        },\r\n        updateParticles: function () {\r\n            var p;\r\n            for (var i = 0; i < this.particles.length; i++) {\r\n                p = this.particles[i];\r\n                if (p.life > p.death) {\r\n                    this.particles.splice(i, 1);\r\n                } else {\r\n                    p.x += p.speed;\r\n                    p.y = this.o.oscillationCoefficient * Math.sin(p.counter * p.increase);\r\n                    p.life++;\r\n                    p.counter += this.disintegrating ? 1 : -1;\r\n                }\r\n            }\r\n            if (!this.particles.length) {\r\n                this.pause();\r\n                this.canvas.style.display = 'none';\r\n                if (is.fnc(this.o.complete)) {\r\n                    this.o.complete();\r\n                }\r\n            }\r\n        },\r\n        renderParticles: function () {\r\n            this.ctx.clearRect(0, 0, this.width, this.height);\r\n            var p;\r\n            for (var i = 0; i < this.particles.length; i++) {\r\n                p = this.particles[i];\r\n                if (p.life < p.death) {\r\n                    this.ctx.translate(p.startX, p.startY);\r\n                    this.ctx.rotate(p.angle * Math.PI / 180);\r\n                    this.ctx.globalAlpha = this.disintegrating ? 1 - p.life / p.death : p.life / p.death;\r\n                    this.ctx.fillStyle = this.ctx.strokeStyle = p.color;\r\n                    this.ctx.beginPath();\r\n                    \r\n                    if ( this.o.type === 'circle' ) {\r\n                        this.ctx.arc(p.x, p.y, p.size, 0, 2 * Math.PI);\r\n                    }\r\n                    else if ( this.o.type === 'triangle' ) {\r\n                        this.ctx.moveTo(p.x, p.y);\r\n                        this.ctx.lineTo(p.x+p.size, p.y+p.size);\r\n                        this.ctx.lineTo(p.x+p.size, p.y-p.size);\r\n                    }\r\n                    else if ( this.o.type === 'rectangle' ){\r\n                        this.ctx.rect(p.x, p.y, p.size, p.size);\r\n                    }\r\n                    \r\n                    if ( this.o.style === 'fill' ) {\r\n                        this.ctx.fill();\r\n                    }\r\n                    else if ( this.o.style === 'stroke' ) {\r\n                        this.ctx.closePath();\r\n                        this.ctx.stroke();\r\n                    }\r\n                    \r\n                    this.ctx.globalAlpha = 1;\r\n                    this.ctx.rotate(-p.angle * Math.PI / 180);\r\n                    this.ctx.translate(-p.startX, -p.startY);\r\n                }\r\n            }\r\n        },\r\n        play: function () {\r\n            this.frame = requestAnimationFrame(this.loop.bind(this));\r\n        },\r\n        pause: function () {\r\n            cancelAnimationFrame(this.frame);\r\n            this.frame = null;\r\n        },\r\n        addParticle: function (options) {\r\n            var frames = this.o.duration * 60 / 1000;\r\n            var speed = is.fnc(this.o.speed) ? this.o.speed() : this.o.speed;\r\n            var color = is.fnc(this.o.color) ? this.o.color() : this.o.color;            \r\n            this.particles.push({\r\n                startX: options.x,\r\n                startY: options.y,\r\n                x: this.disintegrating ? 0 : speed * -frames,\r\n                y: 0,\r\n                color: color,\r\n                angle: rand(360),\r\n                counter: this.disintegrating ? 0 : frames,\r\n                increase: Math.PI * 2 / 100,\r\n                life: 0,\r\n                death: this.disintegrating ? (frames - 20) + Math.random() * 40 : frames,\r\n                speed: speed,\r\n                size: is.fnc(this.o.size) ? this.o.size() : this.o.size\r\n            });\r\n        },\r\n        addParticles: function (rect, progress) {\r\n            var progressDiff = this.disintegrating ? progress - this.lastProgress : this.lastProgress - progress;\r\n            this.lastProgress = progress;\r\n            var x = this.options.canvasPadding;\r\n            var y = this.options.canvasPadding;\r\n            var progressValue = (this.isHorizontal() ? rect.width : rect.height) * progress + progressDiff * (this.disintegrating ? 100 : 220);\r\n            if (this.isHorizontal()) {\r\n                x += this.o.direction === 'left' ? progressValue : rect.width - progressValue;\r\n            } else {\r\n                y += this.o.direction === 'top' ? progressValue : rect.height - progressValue;\r\n            }\r\n            var i = Math.floor(this.o.particlesAmountCoefficient * (progressDiff * 100 + 1));\r\n            if (i > 0) {\r\n                while (i--) {\r\n                    this.addParticle({\r\n                        x: x + (this.isHorizontal() ? 0 : rect.width * Math.random()),\r\n                        y: y + (this.isHorizontal() ? rect.height * Math.random() : 0)\r\n                    });\r\n                }\r\n            }\r\n            if (!this.isAnimating()) {\r\n                this.canvas.style.display = 'block';\r\n                this.play();\r\n            }\r\n        },\r\n        addTransforms: function (value) {\r\n            var translateProperty = this.isHorizontal() ? 'translateX' : 'translateY';\r\n            var translateValue = this.o.direction === 'left' || this.o.direction === 'top' ? value : -value;\r\n            this.wrapper.style[transformString] = translateProperty + '('+ translateValue +'%)';\r\n            this.el.style[transformString] = translateProperty + '('+ -translateValue +'%)';\r\n        },\r\n        disintegrate: function (options) {\r\n            if (!this.isAnimating()) {\r\n                this.disintegrating = true;\r\n                this.lastProgress = 0;\r\n                this.setup(options);\r\n                var _ = this;\r\n                this.animate(function(anim) {\r\n                    var value = anim.animatables[0].target.value;\r\n                    _.addTransforms(value);\r\n                    if (_.o.duration) {\r\n                        _.addParticles(_.rect, value / 100, true);\r\n                    }\r\n                });\r\n            }\r\n        },\r\n        integrate: function (options) {\r\n            if (!this.isAnimating()) {\r\n                this.disintegrating = false;\r\n                this.lastProgress = 1;\r\n                this.setup(options);\r\n                var _ = this;\r\n                this.animate(function(anim) {\r\n                    var value = anim.animatables[0].target.value;\r\n                    setTimeout(function() {\r\n                        _.addTransforms(value);\r\n                    }, _.o.duration);\r\n                    if (_.o.duration) {\r\n                        _.addParticles(_.rect, value / 100, true);\r\n                    }\r\n                });\r\n            }\r\n        },\r\n        setup: function (options) {\r\n            this.o = extend({}, this.options, options);\r\n            this.wrapper.style.visibility = 'visible';\r\n            if (this.o.duration) {\r\n                this.rect = this.el.getBoundingClientRect();\r\n                this.width = this.canvas.width = this.o.width || this.rect.width + this.o.canvasPadding * 2;\r\n                this.height = this.canvas.height = this.o.height || this.rect.height + this.o.canvasPadding * 2;\r\n            }\r\n        },\r\n        animate: function (update) {\r\n            var _ = this;\r\n            anime({\r\n                targets: {value: _.disintegrating ? 0 : 101},\r\n                value: _.disintegrating ? 101 : 0,\r\n                duration: _.o.duration,\r\n                easing: _.o.easing,\r\n                begin: _.o.begin,\r\n                update: update,\r\n                complete: function() {\r\n                    if (_.disintegrating) {\r\n                        _.wrapper.style.visibility = 'hidden';\r\n                    }\r\n                }\r\n            });\r\n        },\r\n        isAnimating: function () {\r\n            return !!this.frame;\r\n        },\r\n        isHorizontal: function () {\r\n            return this.o.direction === 'left' || this.o.direction === 'right';\r\n        }\r\n    };\r\n\r\n\r\n    // Utils\r\n\r\n    var is = {\r\n        arr: function (a) { return Array.isArray(a); },\r\n        str: function (a) { return typeof a === 'string'; },\r\n        fnc: function (a) { return typeof a === 'function'; }\r\n    };\r\n\r\n    function stringToHyphens(str) {\r\n        return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n    }\r\n\r\n    function getCSSValue(el, prop) {\r\n        if (el) {\r\n            if (prop in el.style) {\r\n                return getComputedStyle(el).getPropertyValue(stringToHyphens(prop)) || '0';\r\n            }\r\n        }\r\n    }\r\n\r\n    var t = 'transform';\r\n    var transformString = (getCSSValue(document.body, t) ? t : '-webkit-' + t);\r\n\r\n    function extendSingle(target, source) {\r\n        for (var key in source)\r\n            target[key] = is.arr(source[key]) ? source[key].slice(0) : source[key];\r\n        return target;\r\n    }\r\n\r\n    function extend(target) {\r\n        if (!target) target = {};\r\n        for (var i = 1; i < arguments.length; i++)\r\n            extendSingle(target, arguments[i]);\r\n        return target;\r\n    }\r\n\r\n    function rand(value) {\r\n        return Math.random() * value - value / 2;\r\n    }\r\n\r\n    function getElement(element) {\r\n        return is.str(element) ? document.querySelector(element) : element;\r\n    }\r\n\r\n    return Particles;\r\n\r\n})));\r\n\r\n//# sourceMappingURL=particles.js.map\r\n"],"file":"particles.js"}