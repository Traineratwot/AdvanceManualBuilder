{"version":3,"names":[],"mappings":"","sources":["assets/projects/AdvanceManualBuilder/old/engine/workstation/js/libs/jstree/src/misc.js"],"sourcesContent":["/* global jQuery */\r\n\r\n// disable all events\r\n(function ($, undefined) {\r\n\t;\r\n\t$.jstree.plugins.trigger = function (options, parent) {\r\n\t\tthis.init = function (el, options) {\r\n\t\t\t// do not forget parent\r\n\t\t\tparent.init.call(this, el, options);\r\n\t\t\tthis._data.trigger.disabled = false;\r\n\t\t};\r\n\t\tthis.trigger = function (ev, data) {\r\n\t\t\tif(!this._data.trigger.disabled) {\r\n\t\t\t\tparent.trigger.call(this, ev, data);\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.disable_events = function () { this._data.trigger.disabled = true; };\r\n\t\tthis.enable_events = function () { this._data.trigger.disabled = false; };\r\n\t};\r\n})(jQuery);\r\n\r\n// mapping\r\n(function ($, undefined) {\r\n\t;\r\n\t// use this if you need any options\r\n\t$.jstree.defaults.mapper = {\r\n\t\toption_key : \"option_value\"\r\n\t};\r\n\t$.jstree.plugins.mapper = function () {\r\n\t\tthis._parse_model_from_json = function (d, p, ps) {\r\n\t\t\t// d is the node from the server, it will be called recursively for children,\r\n\t\t\t// so you do not need to process at once\r\n\t\t\t/* // for example\r\n\t\t\tfor(var i in d) {\r\n\t\t\t\tif(d.hasOwnProperty(i)) {\r\n\t\t\t\t\td[i.toLowerCase()] = d[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\treturn parent._parse_model_from_json.call(this, d, p, ps);\r\n\t\t};\r\n\t};\r\n})(jQuery);\r\n\r\n// no hover\r\n(function ($, undefined) {\r\n\t;\r\n\t$.jstree.plugins.nohover = function () {\r\n\t\tthis.hover_node = $.noop;\r\n\t};\r\n})(jQuery);\r\n\r\n// force multiple select\r\n(function ($, undefined) {\r\n\t;\r\n\t$.jstree.defaults.multiselect = {};\r\n\t$.jstree.plugins.multiselect = function (options, parent) {\r\n\t\tthis.activate_node = function (obj, e) {\r\n\t\t\te.ctrlKey = true;\r\n\t\t\tparent.activate_node.call(this, obj, e);\r\n\t\t};\r\n\t};\r\n})(jQuery);\r\n\r\n// real checkboxes\r\n(function ($, undefined) {\r\n\t;\r\n\r\n\tvar inp = document.createElement(\"INPUT\");\r\n\tinp.type = \"checkbox\";\r\n\tinp.className = \"jstree-checkbox jstree-realcheckbox\";\r\n\r\n\t$.jstree.defaults.realcheckboxes = {};\r\n\r\n\t$.jstree.plugins.realcheckboxes = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\t\t\tthis._data.realcheckboxes.uto = false;\r\n\t\t\tthis.element\r\n\t\t\t\t.on('changed.jstree uncheck_node.jstree check_node.jstree uncheck_all.jstree check_all.jstree move_node.jstree copy_node.jstree redraw.jstree open_node.jstree ready.jstree loaded.jstree', $.proxy(function () {\r\n\t\t\t\t\t\t// only if undetermined is in setting\r\n\t\t\t\t\t\tif(this._data.realcheckboxes.uto) { clearTimeout(this._data.realcheckboxes.uto); }\r\n\t\t\t\t\t\tthis._data.realcheckboxes.uto = setTimeout($.proxy(this._realcheckboxes, this), 50);\r\n\t\t\t\t\t}, this));\r\n\t\t};\r\n\t\tthis.redraw_node = function(obj, deep, callback, force_draw) {\r\n\t\t\tobj = parent.redraw_node.call(this, obj, deep, callback, force_draw);\r\n\t\t\tif(obj) {\r\n\t\t\t\tvar i, j, tmp = null, chk = inp.cloneNode(true);\r\n\t\t\t\tfor(i = 0, j = obj.childNodes.length; i < j; i++) {\r\n\t\t\t\t\tif(obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf(\"jstree-anchor\") !== -1) {\r\n\t\t\t\t\t\ttmp = obj.childNodes[i];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(tmp) {\r\n\t\t\t\t\tfor(i = 0, j = tmp.childNodes.length; i < j; i++) {\r\n\t\t\t\t\t\tif(tmp.childNodes[i] && tmp.childNodes[i].className && tmp.childNodes[i].className.indexOf(\"jstree-checkbox\") !== -1) {\r\n\t\t\t\t\t\t\ttmp = tmp.childNodes[i];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(tmp && tmp.tagName === \"I\") {\r\n\t\t\t\t\ttmp.style.backgroundColor = \"transparent\";\r\n\t\t\t\t\ttmp.style.backgroundImage = \"none\";\r\n\t\t\t\t\ttmp.appendChild(chk);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn obj;\r\n\t\t};\r\n\t\tthis._realcheckboxes = function () {\r\n\t\t\tvar ts = this.settings.checkbox.tie_selection;\r\n\t\t\tconsole.log(ts);\r\n\t\t\t$('.jstree-realcheckbox').each(function () {\r\n\t\t\t\tthis.checked = (!ts && this.parentNode.parentNode.className.indexOf(\"jstree-checked\") !== -1) || (ts && this.parentNode.parentNode.className.indexOf('jstree-clicked') !== -1);\r\n\t\t\t\tthis.indeterminate = this.parentNode.className.indexOf(\"jstree-undetermined\") !== -1;\r\n\t\t\t\tthis.disabled = this.parentNode.parentNode.className.indexOf(\"disabled\") !== -1;\r\n\t\t\t});\r\n\t\t};\r\n\t};\r\n})(jQuery);\r\n\r\n// no state\r\n(function ($, undefined) {\r\n\t;\r\n\t$.jstree.plugins.nostate = function () {\r\n\t\tthis.set_state = function (state, callback) {\r\n\t\t\tif(callback) { callback.call(this); }\r\n\t\t\tthis.trigger('set_state');\r\n\t\t};\r\n\t};\r\n})(jQuery);\r\n\r\n// no selected in state\r\n(function ($, undefined) {\r\n\t;\r\n\t$.jstree.plugins.noselectedstate = function (options, parent) {\r\n\t\tthis.get_state = function () {\r\n\t\t\tvar state = parent.get_state.call(this);\r\n\t\t\tdelete state.core.selected;\r\n\t\t\treturn state;\r\n\t\t};\r\n\t};\r\n})(jQuery);\r\n\r\n// additional icon on node (outside of anchor)\r\n(function ($, undefined) {\r\n\t;\r\n\tvar img = document.createElement('IMG');\r\n\t//img.src = \"http://www.dpcd.vic.gov.au/__data/assets/image/0004/30667/help.gif\";\r\n\timg.className = \"jstree-questionmark\";\r\n\r\n\t$.jstree.defaults.questionmark = $.noop;\r\n\t$.jstree.plugins.questionmark = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"click.jstree\", \".jstree-questionmark\", $.proxy(function (e) {\r\n\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\tthis.settings.questionmark.call(this, this.get_node(e.target));\r\n\t\t\t\t\t}, this));\r\n\t\t};\r\n\t\tthis.teardown = function () {\r\n\t\t\tif(this.settings.questionmark) {\r\n\t\t\t\tthis.element.find(\".jstree-questionmark\").remove();\r\n\t\t\t}\r\n\t\t\tparent.teardown.call(this);\r\n\t\t};\r\n\t\tthis.redraw_node = function(obj, deep, callback, force_draw) {\r\n\t\t\tobj = parent.redraw_node.call(this, obj, deep, callback, force_draw);\r\n\t\t\tif(obj) {\r\n\t\t\t\tvar tmp = img.cloneNode(true);\r\n\t\t\t\tobj.insertBefore(tmp, obj.childNodes[2]);\r\n\t\t\t}\r\n\t\t\treturn obj;\r\n\t\t};\r\n\t};\r\n})(jQuery);\r\n\r\n// auto numbering\r\n(function ($, undefined) {\r\n\t;\r\n\tvar span = document.createElement('SPAN');\r\n\tspan.className = \"jstree-numbering\";\r\n\r\n\t$.jstree.defaults.numbering = {};\r\n\t$.jstree.plugins.numbering = function (options, parent) {\r\n\t\tthis.teardown = function () {\r\n\t\t\tif(this.settings.questionmark) {\r\n\t\t\t\tthis.element.find(\".jstree-numbering\").remove();\r\n\t\t\t}\r\n\t\t\tparent.teardown.call(this);\r\n\t\t};\r\n\t\tthis.get_number = function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tvar ind = $.inArray(obj.id, this.get_node(obj.parent).children) + 1;\r\n\t\t\treturn obj.parent === '#' ? ind : this.get_number(obj.parent) + '.' + ind;\r\n\t\t};\r\n\t\tthis.redraw_node = function(obj, deep, callback, force_draw) {\r\n\t\t\tvar i, j, tmp = null, elm = null, org = this.get_number(obj);\r\n\t\t\tobj = parent.redraw_node.call(this, obj, deep, callback, force_draw);\r\n\t\t\tif(obj) {\r\n\t\t\t\tfor(i = 0, j = obj.childNodes.length; i < j; i++) {\r\n\t\t\t\t\tif(obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf(\"jstree-anchor\") !== -1) {\r\n\t\t\t\t\t\ttmp = obj.childNodes[i];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(tmp) {\r\n\t\t\t\t\telm = span.cloneNode(true);\r\n\t\t\t\t\telm.innerHTML = org + '. ';\r\n\t\t\t\t\ttmp.insertBefore(elm, tmp.childNodes[tmp.childNodes.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn obj;\r\n\t\t};\r\n\t};\r\n})(jQuery);\r\n\r\n// additional icon on node (inside anchor)\r\n(function ($, undefined) {\r\n\t;\r\n\tvar _s = document.createElement('SPAN');\r\n\t_s.className = 'fa-stack jstree-stackedicon';\r\n\tvar _i = document.createElement('I');\r\n\t_i.className = 'jstree-icon';\r\n\t_i.setAttribute('role', 'presentation');\r\n\r\n\t$.jstree.plugins.stackedicon = function (options, parent) {\r\n\t\tthis.teardown = function () {\r\n\t\t\tthis.element.find(\".jstree-stackedicon\").remove();\r\n\t\t\tparent.teardown.call(this);\r\n\t\t};\r\n\t\tthis.redraw_node = function(obj, deep, is_callback, force_render) {\r\n\t\t\tobj = parent.redraw_node.apply(this, arguments);\r\n\t\t\tif(obj) {\r\n\t\t\t\tvar i, j, tmp = null, icon = null, temp = null;\r\n\t\t\t\tfor(i = 0, j = obj.childNodes.length; i < j; i++) {\r\n\t\t\t\t\tif(obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf(\"jstree-anchor\") !== -1) {\r\n\t\t\t\t\t\ttmp = obj.childNodes[i];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(tmp) {\r\n\t\t\t\t\tif(this._model.data[obj.id].state.icons && this._model.data[obj.id].state.icons.length) {\r\n\t\t\t\t\t\ticon = _s.cloneNode(false);\r\n\t\t\t\t\t\tfor(i = 0, j = this._model.data[obj.id].state.icons.length; i < j; i++) {\r\n\t\t\t\t\t\t\ttemp = _i.cloneNode(false);\r\n\t\t\t\t\t\t\ttemp.className += ' ' + this._model.data[obj.id].state.icons[i];\r\n\t\t\t\t\t\t\ticon.appendChild(temp);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttmp.insertBefore(icon, tmp.childNodes[0]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn obj;\r\n\t\t};\r\n\t};\r\n})(jQuery);\r\n\r\n// selecting a node opens it\r\n(function ($, undefined) {\r\n\t;\r\n\t$.jstree.plugins.selectopens = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\t\t\tthis.element.on('select_node.jstree', function (e, data) { data.instance.open_node(data.node); });\r\n\t\t};\r\n\t};\r\n})(jQuery);\r\n\r\n// object as data\r\n(function ($, undefined) {\r\n\t;\r\n\t$.jstree.defaults.datamodel = {};\r\n\t$.jstree.plugins.datamodel = function (options, parent) {\r\n\t\tthis.init = function (el, options) {\r\n\t\t\tthis._data.datamodel = {};\r\n\t\t\tparent.init.call(this, el, options);\r\n\t\t};\r\n\t\tthis._datamodel = function (id, nodes, callback) {\r\n\t\t\tvar i = 0, j = nodes.length, tmp = [], obj = null;\r\n\t\t\tfor(; i < j; i++) {\r\n\t\t\t\tthis._data.datamodel[nodes[i].getID()] = nodes[i];\r\n\t\t\t\tobj = {\r\n\t\t\t\t\tid : nodes[i].getID(),\r\n\t\t\t\t\ttext : nodes[i].getText(),\r\n\t\t\t\t\tchildren : nodes[i].hasChildren()\r\n\t\t\t\t};\r\n\t\t\t\tif(nodes[i].getExtra) {\r\n\t\t\t\t\tobj = nodes[i].getExtra(obj); // icon, type\r\n\t\t\t\t}\r\n\t\t\t\ttmp.push(obj);\r\n\t\t\t}\r\n\t\t\treturn this._append_json_data(id, tmp, $.proxy(function (status) {\r\n\t\t\t\tcallback.call(this, status);\r\n\t\t\t}, this));\r\n\t\t};\r\n\t\tthis._load_node = function (obj, callback) {\r\n\t\t\tvar id = obj.id;\r\n\t\t\tvar nd = obj.id === \"#\" ? this.settings.core.data : this._data.datamodel[obj.id].getChildren($.proxy(function (nodes) {\r\n\t\t\t\tthis._datamodel(id, nodes, callback);\r\n\t\t\t}, this));\r\n\t\t\tif($.isArray(nd)) {\r\n\t\t\t\tthis._datamodel(id, nd, callback);\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n})(jQuery);\r\n/*\r\n\tdemo of the above\r\n\tfunction treeNode(val) {\r\n\t\tvar id = ++treeNode.counter;\r\n\t\tthis.getID = function () {\r\n\t\t\treturn id;\r\n\t\t};\r\n\t\tthis.getText = function () {\r\n\t\t\treturn val.toString();\r\n\t\t};\r\n\t\tthis.getExtra = function (obj) {\r\n\t\t\tobj.icon = false;\r\n\t\t\treturn obj;\r\n\t\t};\r\n\t\tthis.hasChildren = function () {\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\tthis.getChildren = function () {\r\n\t\t\treturn [\r\n\t\t\t\tnew treeNode(Math.pow(val, 2)),\r\n\t\t\t\tnew treeNode(Math.sqrt(val)),\r\n\t\t\t];\r\n\t\t};\r\n\t}\r\n\ttreeNode.counter = 0;\r\n\r\n\t$('#jstree').jstree({\r\n\t\t'core': {\r\n\t\t\t'data': [\r\n\t\t\t\t\t\tnew treeNode(2),\r\n\t\t\t\t\t\tnew treeNode(3),\r\n\t\t\t\t\t\tnew treeNode(4),\r\n\t\t\t\t\t\tnew treeNode(5)\r\n\t\t\t\t\t]\r\n\t\t},\r\n\t\tplugins : ['datamodel']\r\n\t});\r\n*/\r\n\r\n// untested sample plugin to keep all nodes in the DOM\r\n(function ($, undefined) {\r\n\t;\r\n\t$.jstree.plugins.dom = function (options, parent) {\r\n\t\tthis.redraw_node = function (node, deep, is_callback, force_render) {\r\n\t\t\treturn parent.redraw_node.call(this, node, deep, is_callback, true);\r\n\t\t};\r\n\t\tthis.close_node = function (obj, animation) {\r\n\t\t\tvar t1, t2, t, d;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.close_node(obj[t1], animation);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.is_closed(obj)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tanimation = animation === undefined ? this.settings.core.animation : animation;\r\n\t\t\tt = this;\r\n\t\t\td = this.get_node(obj, true);\r\n\t\t\tif(d.length) {\r\n\t\t\t\tif(!animation) {\r\n\t\t\t\t\td[0].className = d[0].className.replace('jstree-open', 'jstree-closed');\r\n\t\t\t\t\td.attr(\"aria-expanded\", false);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\td\r\n\t\t\t\t\t\t.children(\".jstree-children\").attr(\"style\",\"display:block !important\").end()\r\n\t\t\t\t\t\t.removeClass(\"jstree-open\").addClass(\"jstree-closed\").attr(\"aria-expanded\", false)\r\n\t\t\t\t\t\t.children(\".jstree-children\").stop(true, true).slideUp(animation, function () {\r\n\t\t\t\t\t\t\tthis.style.display = \"\";\r\n\t\t\t\t\t\t\tt.trigger(\"after_close\", { \"node\" : obj });\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tobj.state.opened = false;\r\n\t\t\tthis.trigger('close_node',{ \"node\" : obj });\r\n\t\t\tif(!animation || !d.length) {\r\n\t\t\t\tthis.trigger(\"after_close\", { \"node\" : obj });\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n})(jQuery);\r\n\r\n// customize plugin by @Lusito\r\n// https://github.com/Lusito/jstree/blob/node-customize/src/jstree-node-customize.js\r\n/**\r\n * ### Node Customize plugin\r\n *\r\n * Allows to customize nodes when they are drawn.\r\n */\r\n(function (factory) {\r\n\t;\r\n\tif (typeof define === 'function' && define.amd) {\r\n\t\tdefine('jstree.node_customize', ['jquery','jstree'], factory);\r\n\t}\r\n\telse if(typeof exports === 'object') {\r\n\t\tfactory(require('jquery'), require('jstree'));\r\n\t}\r\n\telse {\r\n\t\tfactory(jQuery, jQuery.jstree);\r\n\t}\r\n}(function ($, jstree, undefined) {\r\n\t;\r\n\r\n\tif($.jstree.plugins.node_customize) { return; }\r\n\r\n\t/**\r\n\t * the settings object.\r\n\t * key is the attribute name to select the customizer function from switch.\r\n\t * switch is a key => function(el, node) map.\r\n\t * default: function(el, node) will be called if the type could not be mapped\r\n\t * @name $.jstree.defaults.node_customize\r\n\t * @plugin node_customize\r\n\t */\r\n\t$.jstree.defaults.node_customize = {\r\n\t\t\"key\": \"type\",\r\n\t\t\"switch\": {},\r\n\t\t\"default\": null\r\n\t};\r\n\r\n\t$.jstree.plugins.node_customize = function (options, parent) {\r\n\t\tthis.redraw_node = function (obj, deep, callback, force_draw) {\r\n\t\t\tvar el = parent.redraw_node.apply(this, arguments);\r\n\t\t\tif (el) {\r\n\t\t\t\tvar node = this.get_node(obj);\r\n\t\t\t\tvar cfg = this.settings.node_customize;\r\n\t\t\t\tvar key = cfg.key;\r\n\t\t\t\tvar type =  (node && node.original && node.original[key]);\r\n\t\t\t\tvar customizer = (type && cfg.switch[type]) || cfg.default;\r\n\t\t\t\tif(customizer)\r\n\t\t\t\t\tcustomizer(el, node);\r\n\t\t\t}\r\n\t\t\treturn el;\r\n\t\t};\r\n\t}\r\n}));\r\n\r\n\r\n// parentsload plugin by @ashl1\r\n/**\r\n * ### Parentsload plugin\r\n *\r\n * Change load_node() functionality in jsTree, to possible load not yes downloaded node with all it parent in a single request (only useful with lazy loading).\r\n *\r\n * version 1.0.0 (Alexey Shildyakov - ashl1future@gmail.com)\r\n * 2015: Compatible with jsTree-3.2.1\r\n */\r\n/*globals jQuery, define, exports, require, document */\r\n(function (factory) {\r\n        ;\r\n        if (typeof define === 'function' && define.amd) {\r\n                define('jstree.parentsload', ['jquery','jstree'], factory);\r\n        }\r\n        else if(typeof exports === 'object') {\r\n                factory(require('jquery'), require('jstree'));\r\n        }\r\n        else {\r\n                factory(jQuery, jQuery.jstree);\r\n        }\r\n}(function ($, jstree, undefined) {\r\n        ;\r\n\r\n        if($.jstree.plugins.parentsload) { return; }\r\n\r\n        /**\r\n         * parentsload configuration\r\n         *\r\n         * The configuration syntax is almost the same as for core.data option. You must set parenstload.data the following:\r\n         *\r\n         * parentsload: {\r\n         *      data: function(){} // this function overwrites core data.data options\r\n         * }\r\n         *\r\n         * OR\r\n         *\r\n         * parentsload: {\r\n         *      data: {\r\n         *              url: function(node){} OR string,\r\n         *              data: function(node){} OR associative array as json{data} jQuery parameter\r\n         *      }\r\n         * }\r\n         *\r\n         * In last case at least on of 'url' or 'data' must be presented.\r\n         *\r\n         * At first, the plugin load_node() detects if the node already downloaded. If is - uses the core.data settings, if not - uses parentsload.data settings\r\n         * to fetch in one query the specified node and all its parent. The data must be in the first mentioned JSON format with set nested children[].\r\n         * Each node level should consist of all nodes on the level to properly work with the tree in the future. Otherwise, you must manually call load_node\r\n         * on every parent node to fetch all children nodes on that level.\r\n         *\r\n         * @name $.jstree.defaults.parentsload\r\n         * @plugin parentsload\r\n         */\r\n        $.jstree.defaults.parentsload = null;\r\n        $.jstree.plugins.parentsload = function (options, parent) {\r\n                this.init = function (el, options) {\r\n                        parent.init.call(this, el, options);\r\n                        this.patch_data()\r\n                };\r\n                this.patch_data = function(){\r\n                        var parentsloadSettings = this.settings.parentsload;\r\n                        var jsTreeDataSettings = this.settings.core.data;\r\n                        var self = this;\r\n\r\n                        var callError = function(number, message) {\r\n                                self._data.core.last_error = { 'error' : 'configuration', 'plugin' : 'parentsload', 'id' : 'parentsload_' + number, 'reason' : message, 'data' : JSON.stringify({config: parentsloadSettings}) };\r\n                                self.settings.core.error.call(self, self._data.core.last_error);\r\n                        }\r\n\r\n                        if(!parentsloadSettings) {\r\n                                callError('01', 'The configuration must be presented')\r\n                                return\r\n                        }\r\n                        parentsloadSettings = parentsloadSettings.data;\r\n\r\n                        var patchSettingsProperty = function (propertyName) {\r\n                                var property = parentsloadSettings[propertyName],\r\n                                    coreProperty = jsTreeDataSettings[propertyName];\r\n                                if (property) {\r\n                                        jsTreeDataSettings[propertyName] = function(node) {\r\n                                                if (this.get_node(node).parentsload_required) {\r\n                                                        if ($.isFunction(property)) {\r\n                                                                return property.call(this, node)\r\n                                                        } else {// (typeof property === 'string')\r\n                                                                return property\r\n                                                        }\r\n                                                } else {\r\n                                                        if ($.isFunction(coreProperty)) {\r\n                                                                return coreProperty.call(this, node)\r\n                                                        } else { // (typeof coreProperty === 'string')\r\n                                                                return coreProperty\r\n                                                        }\r\n                                                }\r\n                                        }\r\n                                } /* else {\r\n                                        use jstree the same data[propertyName] settings\r\n                                }*/\r\n                        }\r\n\r\n                        if($.isFunction(parentsloadSettings)) {\r\n                                this.settings.data = parentsloadSettings\r\n                        } else if (typeof parentsloadSettings === 'object') {\r\n                                if (! (parentsloadSettings.url || parentsloadSettings.data)) {\r\n                                        callError('02', 'The \"data.url\" or \"data.data\" must be presented in configuration')\r\n                                        return\r\n                                }\r\n                                patchSettingsProperty('url')\r\n                                patchSettingsProperty('data')\r\n\r\n                        } else {\r\n                                callError('03', 'The appropriate \"data.url\" or \"data.data\" must be presented in configuration')\r\n                        }\r\n                }\r\n\r\n                this.load_node = function (obj, callback) {\r\n                        if($.isArray(obj)) {\r\n                                // FIXME: _load_nodes will not load nodes not presented in the tree\r\n                                this._load_nodes(obj.slice(), callback);\r\n                                return true;\r\n                        }\r\n                        var foundObj = this.get_node(obj);\r\n                        if (foundObj) {\r\n                                return parent.load_node.apply(this, arguments)\r\n                        } else {\r\n                                // node hasn't been loaded\r\n                                var id = obj.id? obj.id: obj;\r\n                                this._model.data[id] = {\r\n                                        id : id,\r\n                                        parent : '#',\r\n                                        parents : [],\r\n                                        children : [],\r\n                                        children_d : [],\r\n                                        state : { loaded : false },\r\n                                        li_attr : {},\r\n                                        a_attr : {},\r\n                                        parentsload_required : true,\r\n                                };\r\n                                return parent.load_node.call(this, obj, function(obj, status){\r\n                                        obj.parentsload_required = !status\r\n                                        callback.call(this, obj, status)\r\n                                })\r\n                        }\r\n                }\r\n        };\r\n}));\r\n\r\n// conditional deselect\r\n(function (factory) {\r\n\t;\r\n\tif (typeof define === 'function' && define.amd) {\r\n\t\tdefine('jstree.conditionaldeselect', ['jquery','jstree'], factory);\r\n\t}\r\n\telse if(typeof exports === 'object') {\r\n\t\tfactory(require('jquery'), require('jstree'));\r\n\t}\r\n\telse {\r\n\t\tfactory(jQuery, jQuery.jstree);\r\n\t}\r\n}(function ($, jstree, undefined) {\r\n\t;\r\n\r\n\tif($.jstree.plugins.conditionaldeselect) { return; }\r\n\t$.jstree.defaults.conditionaldeselect = function () { return true; };\r\n\t$.jstree.plugins.conditionaldeselect = function (options, parent) {\r\n\t\t// own function\r\n\t\tthis.deselect_node = function (obj, supress_event, e) {\r\n\t\t\tif(this.settings.conditionaldeselect.call(this, this.get_node(obj), e)) {\r\n\t\t\t\treturn parent.deselect_node.call(this, obj, supress_event, e);\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n}));\r\n\r\n// conditional close\r\n(function (factory) {\r\n\t;\r\n\tif (typeof define === 'function' && define.amd) {\r\n\t\tdefine('jstree.conditionalclose', ['jquery','jstree'], factory);\r\n\t}\r\n\telse if(typeof exports === 'object') {\r\n\t\tfactory(require('jquery'), require('jstree'));\r\n\t}\r\n\telse {\r\n\t\tfactory(jQuery, jQuery.jstree);\r\n\t}\r\n}(function ($, jstree, undefined) {\r\n\t;\r\n\r\n\tif($.jstree.plugins.conditionalclose) { return; }\r\n\t$.jstree.defaults.conditionalclose = function () { return true; };\r\n\t$.jstree.plugins.conditionalclose = function (options, parent) {\r\n\t\t// own function\r\n\t\tthis.close_node = function (obj, animation) {\r\n\t\t\tif(this.settings.conditionalclose.close.call(this, this.get_node(obj), e)) {\r\n\t\t\t\treturn parent.deselect_node.call(this, obj, animation);\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n}));\r\n\r\n// separate items and badges plugin by vdkkia (vahidkiani88@gmail.com)\r\n// https://github.com/vdkkia/jstree\r\n//\r\n//CSS:\r\n//.separator{border-bottom:1px solid;border-image-source:linear-gradient(45deg,rgba(0,0,0,0),rgba(0,0,0,.1),rgba(0,0,0,0));border-image-slice:1;width:100%;left:0;color:#aaa;font-size:10px;font-weight:400;float:right;text-align:right;padding-right:20px;position:absolute;z-index:-1}.treeaction{color:#555;margin-left:3px;padding:2px;font-weight:700;font-size:10px;border:none;background-color:#fff;transition:all .2s ease-in-out;text-decoration:none;float:right;margin-right:2px;top:4px}.treeaction:hover{color:green;text-decoration:none;transform:scale(1.5)}\r\n(function (factory) {\r\n}(function ($, jstree, undefined) {\r\n\t;\r\n\t$.jstree.plugins.node_customize = function (options, parent) {\r\n\t\tthis.redraw_node = function (obj, deep, callback, force_draw) {\r\n\t\t\tvar el = parent.redraw_node.apply(this, arguments);\r\n\t\t\tif (el) {\r\n\t\t\t\tvar node = this.get_node(obj);\r\n\t\t\t\tvar cfg = this.settings.node_customize;\r\n\t\t\t\tvar key = cfg.key;\r\n\t\t\t\tvar type =  (node && node.original && node.original[key]);\r\n\t\t\t\tvar customizer = (type && cfg.switch[type]) || cfg.default;\r\n\t\t\t\tif(customizer)\r\n\t\t\t\t\tcustomizer(el, node);\r\n\t\t\t}\r\n\t\t\treturn el;\r\n\t\t};\r\n\t}\r\n}));\r\n\r\n//# sourceMappingURL=misc.js.map\r\n"],"file":"misc.js"}